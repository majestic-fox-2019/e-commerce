const objectAlign = (target, ref) => {
  if (!(target instanceof Object) || !(ref instanceof Object)) {
    return;
  }

  if (Array.isArray(target) !== Array.isArray(ref)) {
    return;
  }

  if (Array.isArray(target)) {
    for (let idx = 0, len = Math.min(target.length, ref.length); idx < len; idx += 1) {
      objectAlign(target[idx], ref[idx]);
    }

    return;
  }

  const keysTarget = Object.keys(target);
  const keysRef = Object.keys(ref);
  keysTarget.map(k => [k, keysRef.indexOf(k)]).map(([k, idx]) => idx === -1 ? [k, Number.MAX_VALUE] : [k, idx]).sort(([k1, idx1], [k2, idx2]) => idx1 - idx2).forEach(([k, idx]) => {
    const value = target[k];

    if (idx !== Number.MAX_VALUE) {
      objectAlign(value, ref[k]);
    } // eslint-disable-next-line no-param-reassign


    delete target[k]; // eslint-disable-next-line no-param-reassign

    target[k] = value;
  });
};

module.exports = objectAlign;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJvYmplY3RBbGlnbiIsInRhcmdldCIsInJlZiIsIk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImlkeCIsImxlbiIsIk1hdGgiLCJtaW4iLCJsZW5ndGgiLCJrZXlzVGFyZ2V0Iiwia2V5cyIsImtleXNSZWYiLCJtYXAiLCJrIiwiaW5kZXhPZiIsIk51bWJlciIsIk1BWF9WQUxVRSIsInNvcnQiLCJrMSIsImlkeDEiLCJrMiIsImlkeDIiLCJmb3JFYWNoIiwidmFsdWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxXQUFXLEdBQUcsQ0FBQ0MsTUFBRCxFQUFTQyxHQUFULEtBQWlCO0FBQ25DLE1BQ0UsRUFBRUQsTUFBTSxZQUFZRSxNQUFwQixLQUNHLEVBQUVELEdBQUcsWUFBWUMsTUFBakIsQ0FGTCxFQUdFO0FBQ0E7QUFDRDs7QUFDRCxNQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0osTUFBZCxNQUEwQkcsS0FBSyxDQUFDQyxPQUFOLENBQWNILEdBQWQsQ0FBOUIsRUFBa0Q7QUFDaEQ7QUFDRDs7QUFFRCxNQUFJRSxLQUFLLENBQUNDLE9BQU4sQ0FBY0osTUFBZCxDQUFKLEVBQTJCO0FBQ3pCLFNBQUssSUFBSUssR0FBRyxHQUFHLENBQVYsRUFBYUMsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1IsTUFBTSxDQUFDUyxNQUFoQixFQUF3QlIsR0FBRyxDQUFDUSxNQUE1QixDQUF4QixFQUE2REosR0FBRyxHQUFHQyxHQUFuRSxFQUF3RUQsR0FBRyxJQUFJLENBQS9FLEVBQWtGO0FBQ2hGTixNQUFBQSxXQUFXLENBQUNDLE1BQU0sQ0FBQ0ssR0FBRCxDQUFQLEVBQWNKLEdBQUcsQ0FBQ0ksR0FBRCxDQUFqQixDQUFYO0FBQ0Q7O0FBQ0Q7QUFDRDs7QUFFRCxRQUFNSyxVQUFVLEdBQUdSLE1BQU0sQ0FBQ1MsSUFBUCxDQUFZWCxNQUFaLENBQW5CO0FBQ0EsUUFBTVksT0FBTyxHQUFHVixNQUFNLENBQUNTLElBQVAsQ0FBWVYsR0FBWixDQUFoQjtBQUNBUyxFQUFBQSxVQUFVLENBQ1BHLEdBREgsQ0FDUUMsQ0FBRCxJQUFPLENBQUNBLENBQUQsRUFBSUYsT0FBTyxDQUFDRyxPQUFSLENBQWdCRCxDQUFoQixDQUFKLENBRGQsRUFFR0QsR0FGSCxDQUVPLENBQUMsQ0FBQ0MsQ0FBRCxFQUFJVCxHQUFKLENBQUQsS0FBZUEsR0FBRyxLQUFLLENBQUMsQ0FBVCxHQUFhLENBQUNTLENBQUQsRUFBSUUsTUFBTSxDQUFDQyxTQUFYLENBQWIsR0FBcUMsQ0FBQ0gsQ0FBRCxFQUFJVCxHQUFKLENBRjNELEVBR0dhLElBSEgsQ0FHUSxDQUFDLENBQUNDLEVBQUQsRUFBS0MsSUFBTCxDQUFELEVBQWEsQ0FBQ0MsRUFBRCxFQUFLQyxJQUFMLENBQWIsS0FBNEJGLElBQUksR0FBR0UsSUFIM0MsRUFJR0MsT0FKSCxDQUlXLENBQUMsQ0FBQ1QsQ0FBRCxFQUFJVCxHQUFKLENBQUQsS0FBYztBQUNyQixVQUFNbUIsS0FBSyxHQUFHeEIsTUFBTSxDQUFDYyxDQUFELENBQXBCOztBQUNBLFFBQUlULEdBQUcsS0FBS1csTUFBTSxDQUFDQyxTQUFuQixFQUE4QjtBQUM1QmxCLE1BQUFBLFdBQVcsQ0FBQ3lCLEtBQUQsRUFBUXZCLEdBQUcsQ0FBQ2EsQ0FBRCxDQUFYLENBQVg7QUFDRCxLQUpvQixDQUtyQjs7O0FBQ0EsV0FBT2QsTUFBTSxDQUFDYyxDQUFELENBQWIsQ0FOcUIsQ0FPckI7O0FBQ0FkLElBQUFBLE1BQU0sQ0FBQ2MsQ0FBRCxDQUFOLEdBQVlVLEtBQVo7QUFDRCxHQWJIO0FBY0QsQ0FsQ0Q7O0FBbUNBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIzQixXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG9iamVjdEFsaWduID0gKHRhcmdldCwgcmVmKSA9PiB7XG4gIGlmIChcbiAgICAhKHRhcmdldCBpbnN0YW5jZW9mIE9iamVjdClcbiAgICB8fCAhKHJlZiBpbnN0YW5jZW9mIE9iamVjdClcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgIT09IEFycmF5LmlzQXJyYXkocmVmKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICBmb3IgKGxldCBpZHggPSAwLCBsZW4gPSBNYXRoLm1pbih0YXJnZXQubGVuZ3RoLCByZWYubGVuZ3RoKTsgaWR4IDwgbGVuOyBpZHggKz0gMSkge1xuICAgICAgb2JqZWN0QWxpZ24odGFyZ2V0W2lkeF0sIHJlZltpZHhdKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qga2V5c1RhcmdldCA9IE9iamVjdC5rZXlzKHRhcmdldCk7XG4gIGNvbnN0IGtleXNSZWYgPSBPYmplY3Qua2V5cyhyZWYpO1xuICBrZXlzVGFyZ2V0XG4gICAgLm1hcCgoaykgPT4gW2ssIGtleXNSZWYuaW5kZXhPZihrKV0pXG4gICAgLm1hcCgoW2ssIGlkeF0pID0+IChpZHggPT09IC0xID8gW2ssIE51bWJlci5NQVhfVkFMVUVdIDogW2ssIGlkeF0pKVxuICAgIC5zb3J0KChbazEsIGlkeDFdLCBbazIsIGlkeDJdKSA9PiBpZHgxIC0gaWR4MilcbiAgICAuZm9yRWFjaCgoW2ssIGlkeF0pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0W2tdO1xuICAgICAgaWYgKGlkeCAhPT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICBvYmplY3RBbGlnbih2YWx1ZSwgcmVmW2tdKTtcbiAgICAgIH1cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgZGVsZXRlIHRhcmdldFtrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgdGFyZ2V0W2tdID0gdmFsdWU7XG4gICAgfSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RBbGlnbjtcbiJdfQ==