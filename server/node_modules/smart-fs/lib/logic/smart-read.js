function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const assert = require('assert');

const fs = require('fs');

const yamlBoost = require('yaml-boost');

const yaml = require('js-yaml');

const xmlParser = require('../util/xml-parser');

const getExt = require('../util/get-ext');

module.exports = (filepath, options = {}) => {
  assert(typeof filepath === 'string');
  assert(options instanceof Object && !Array.isArray(options));

  const ctx = _objectSpread({
    treatAs: null,
    resolve: true
  }, options);

  assert(Object.keys(ctx).length === 2, 'Unexpected Option provided!');
  assert(ctx.treatAs === null || typeof ctx.treatAs === 'string');
  assert(typeof ctx.resolve === 'boolean');
  let result;

  switch (ctx.treatAs || getExt(filepath)) {
    case 'json':
      result = JSON.parse(fs.readFileSync(filepath, 'utf8'));
      break;

    case 'xml':
      result = xmlParser.parse(fs.readFileSync(filepath, 'utf8'), options);
      break;

    case 'yml':
    case 'yaml':
      result = ctx.resolve ? yamlBoost.load(filepath, {}) : yaml.load(fs.readFileSync(filepath, 'utf8'));
      break;

    case 'js':
      // eslint-disable-next-line import/no-dynamic-require,global-require
      result = require(filepath);
      break;

    default:
      result = fs.readFileSync(filepath, 'utf8').split('\n');

      if (result[result.length - 1].trim() === '') {
        result.pop();
      }

      break;
  }

  return result;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dpYy9zbWFydC1yZWFkLmpzIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJmcyIsInlhbWxCb29zdCIsInlhbWwiLCJ4bWxQYXJzZXIiLCJnZXRFeHQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZmlsZXBhdGgiLCJvcHRpb25zIiwiT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwiY3R4IiwidHJlYXRBcyIsInJlc29sdmUiLCJrZXlzIiwibGVuZ3RoIiwicmVzdWx0IiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwibG9hZCIsInNwbGl0IiwidHJpbSIsInBvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFDQSxNQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU1FLFNBQVMsR0FBR0YsT0FBTyxDQUFDLFlBQUQsQ0FBekI7O0FBQ0EsTUFBTUcsSUFBSSxHQUFHSCxPQUFPLENBQUMsU0FBRCxDQUFwQjs7QUFDQSxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxvQkFBRCxDQUF6Qjs7QUFDQSxNQUFNSyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxpQkFBRCxDQUF0Qjs7QUFHQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLFFBQUQsRUFBV0MsT0FBTyxHQUFHLEVBQXJCLEtBQTRCO0FBQzNDVixFQUFBQSxNQUFNLENBQUMsT0FBT1MsUUFBUCxLQUFvQixRQUFyQixDQUFOO0FBQ0FULEVBQUFBLE1BQU0sQ0FBQ1UsT0FBTyxZQUFZQyxNQUFuQixJQUE2QixDQUFDQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsT0FBZCxDQUEvQixDQUFOOztBQUVBLFFBQU1JLEdBQUc7QUFBS0MsSUFBQUEsT0FBTyxFQUFFLElBQWQ7QUFBb0JDLElBQUFBLE9BQU8sRUFBRTtBQUE3QixLQUFzQ04sT0FBdEMsQ0FBVDs7QUFDQVYsRUFBQUEsTUFBTSxDQUFDVyxNQUFNLENBQUNNLElBQVAsQ0FBWUgsR0FBWixFQUFpQkksTUFBakIsS0FBNEIsQ0FBN0IsRUFBZ0MsNkJBQWhDLENBQU47QUFDQWxCLEVBQUFBLE1BQU0sQ0FBQ2MsR0FBRyxDQUFDQyxPQUFKLEtBQWdCLElBQWhCLElBQXdCLE9BQU9ELEdBQUcsQ0FBQ0MsT0FBWCxLQUF1QixRQUFoRCxDQUFOO0FBQ0FmLEVBQUFBLE1BQU0sQ0FBQyxPQUFPYyxHQUFHLENBQUNFLE9BQVgsS0FBdUIsU0FBeEIsQ0FBTjtBQUVBLE1BQUlHLE1BQUo7O0FBQ0EsVUFBUUwsR0FBRyxDQUFDQyxPQUFKLElBQWVULE1BQU0sQ0FBQ0csUUFBRCxDQUE3QjtBQUNFLFNBQUssTUFBTDtBQUNFVSxNQUFBQSxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXbkIsRUFBRSxDQUFDb0IsWUFBSCxDQUFnQmIsUUFBaEIsRUFBMEIsTUFBMUIsQ0FBWCxDQUFUO0FBQ0E7O0FBQ0YsU0FBSyxLQUFMO0FBQ0VVLE1BQUFBLE1BQU0sR0FBR2QsU0FBUyxDQUFDZ0IsS0FBVixDQUFnQm5CLEVBQUUsQ0FBQ29CLFlBQUgsQ0FBZ0JiLFFBQWhCLEVBQTBCLE1BQTFCLENBQWhCLEVBQW1EQyxPQUFuRCxDQUFUO0FBQ0E7O0FBQ0YsU0FBSyxLQUFMO0FBQ0EsU0FBSyxNQUFMO0FBQ0VTLE1BQUFBLE1BQU0sR0FBR0wsR0FBRyxDQUFDRSxPQUFKLEdBQ0xiLFNBQVMsQ0FBQ29CLElBQVYsQ0FBZWQsUUFBZixFQUF5QixFQUF6QixDQURLLEdBRUxMLElBQUksQ0FBQ21CLElBQUwsQ0FBVXJCLEVBQUUsQ0FBQ29CLFlBQUgsQ0FBZ0JiLFFBQWhCLEVBQTBCLE1BQTFCLENBQVYsQ0FGSjtBQUdBOztBQUNGLFNBQUssSUFBTDtBQUNFO0FBQ0FVLE1BQUFBLE1BQU0sR0FBR2xCLE9BQU8sQ0FBQ1EsUUFBRCxDQUFoQjtBQUNBOztBQUNGO0FBQ0VVLE1BQUFBLE1BQU0sR0FBR2pCLEVBQUUsQ0FBQ29CLFlBQUgsQ0FBZ0JiLFFBQWhCLEVBQTBCLE1BQTFCLEVBQWtDZSxLQUFsQyxDQUF3QyxJQUF4QyxDQUFUOztBQUNBLFVBQUlMLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDRCxNQUFQLEdBQWdCLENBQWpCLENBQU4sQ0FBMEJPLElBQTFCLE9BQXFDLEVBQXpDLEVBQTZDO0FBQzNDTixRQUFBQSxNQUFNLENBQUNPLEdBQVA7QUFDRDs7QUFDRDtBQXRCSjs7QUF3QkEsU0FBT1AsTUFBUDtBQUNELENBbkNEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB5YW1sQm9vc3QgPSByZXF1aXJlKCd5YW1sLWJvb3N0Jyk7XG5jb25zdCB5YW1sID0gcmVxdWlyZSgnanMteWFtbCcpO1xuY29uc3QgeG1sUGFyc2VyID0gcmVxdWlyZSgnLi4vdXRpbC94bWwtcGFyc2VyJyk7XG5jb25zdCBnZXRFeHQgPSByZXF1aXJlKCcuLi91dGlsL2dldC1leHQnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChmaWxlcGF0aCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGFzc2VydCh0eXBlb2YgZmlsZXBhdGggPT09ICdzdHJpbmcnKTtcbiAgYXNzZXJ0KG9wdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QgJiYgIUFycmF5LmlzQXJyYXkob3B0aW9ucykpO1xuXG4gIGNvbnN0IGN0eCA9IHsgdHJlYXRBczogbnVsbCwgcmVzb2x2ZTogdHJ1ZSwgLi4ub3B0aW9ucyB9O1xuICBhc3NlcnQoT2JqZWN0LmtleXMoY3R4KS5sZW5ndGggPT09IDIsICdVbmV4cGVjdGVkIE9wdGlvbiBwcm92aWRlZCEnKTtcbiAgYXNzZXJ0KGN0eC50cmVhdEFzID09PSBudWxsIHx8IHR5cGVvZiBjdHgudHJlYXRBcyA9PT0gJ3N0cmluZycpO1xuICBhc3NlcnQodHlwZW9mIGN0eC5yZXNvbHZlID09PSAnYm9vbGVhbicpO1xuXG4gIGxldCByZXN1bHQ7XG4gIHN3aXRjaCAoY3R4LnRyZWF0QXMgfHwgZ2V0RXh0KGZpbGVwYXRoKSkge1xuICAgIGNhc2UgJ2pzb24nOlxuICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoZmlsZXBhdGgsICd1dGY4JykpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAneG1sJzpcbiAgICAgIHJlc3VsdCA9IHhtbFBhcnNlci5wYXJzZShmcy5yZWFkRmlsZVN5bmMoZmlsZXBhdGgsICd1dGY4JyksIG9wdGlvbnMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAneW1sJzpcbiAgICBjYXNlICd5YW1sJzpcbiAgICAgIHJlc3VsdCA9IGN0eC5yZXNvbHZlXG4gICAgICAgID8geWFtbEJvb3N0LmxvYWQoZmlsZXBhdGgsIHt9KVxuICAgICAgICA6IHlhbWwubG9hZChmcy5yZWFkRmlsZVN5bmMoZmlsZXBhdGgsICd1dGY4JykpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnanMnOlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1keW5hbWljLXJlcXVpcmUsZ2xvYmFsLXJlcXVpcmVcbiAgICAgIHJlc3VsdCA9IHJlcXVpcmUoZmlsZXBhdGgpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlc3VsdCA9IGZzLnJlYWRGaWxlU3luYyhmaWxlcGF0aCwgJ3V0ZjgnKS5zcGxpdCgnXFxuJyk7XG4gICAgICBpZiAocmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgIHJlc3VsdC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl19