function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const assert = require('assert');

const fs = require('fs');

const path = require('path');

const isEqual = require('lodash.isequal');

const cloneDeep = require('lodash.clonedeep');

const fsExtra = require('fs-extra');

const stringify = require('json-stringify-pretty-compact');

const yaml = require('yaml-boost');

const objectAlign = require('object-align');

const smartRead = require('./smart-read');

const xmlParser = require('../util/xml-parser');

const getExt = require('../util/get-ext');

module.exports = (filepath, content, options = {}) => {
  assert(typeof filepath === 'string');
  assert(content instanceof Object);
  assert(options instanceof Object && !Array.isArray(options));

  const ctx = _objectSpread({
    treatAs: null,
    mergeStrategy: (existing, changeset) => changeset,
    create: true,
    pretty: false,
    keepOrder: true,
    resolve: false
  }, options);

  assert(Object.keys(ctx).length === 6, 'Unexpected Option provided!');
  assert(ctx.treatAs === null || typeof ctx.treatAs === 'string');
  assert(typeof ctx.mergeStrategy === 'function');
  assert(typeof ctx.create === 'boolean');
  assert(typeof ctx.pretty === 'boolean');
  assert(typeof ctx.keepOrder === 'boolean');
  assert(typeof ctx.resolve === 'boolean');
  const targetExists = fs.existsSync(filepath);

  if (ctx.create !== true && !targetExists) {
    return false;
  }

  const ext = getExt(filepath);
  const currentContent = targetExists ? smartRead(filepath, {
    treatAs: ctx.treatAs === null && ext === 'js' ? 'txt' : ctx.treatAs,
    resolve: ctx.resolve
  }) : null;
  const mergedContent = currentContent == null ? content : ctx.mergeStrategy(cloneDeep(currentContent), cloneDeep(content));

  if (!isEqual(currentContent, mergedContent)) {
    fsExtra.ensureDirSync(path.dirname(filepath));

    if (ctx.keepOrder) {
      objectAlign(mergedContent, currentContent);
    }

    let contentString;

    switch (ctx.treatAs || ext) {
      case 'yml':
      case 'yaml':
        contentString = yaml.dump(mergedContent);
        break;

      case 'xml':
        contentString = xmlParser.stringify(mergedContent, options);
        break;

      case 'json':
        contentString = `${ctx.pretty ? stringify(mergedContent) : JSON.stringify(mergedContent, null, 2)}\n`;
        break;

      default:
        assert(Array.isArray(mergedContent));
        contentString = `${mergedContent.join('\n')}\n`;
        break;
    }

    fs.writeFileSync(filepath, contentString);
    return true;
  }

  return false;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dpYy9zbWFydC13cml0ZS5qcyJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiZnMiLCJwYXRoIiwiaXNFcXVhbCIsImNsb25lRGVlcCIsImZzRXh0cmEiLCJzdHJpbmdpZnkiLCJ5YW1sIiwib2JqZWN0QWxpZ24iLCJzbWFydFJlYWQiLCJ4bWxQYXJzZXIiLCJnZXRFeHQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZmlsZXBhdGgiLCJjb250ZW50Iiwib3B0aW9ucyIsIk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImN0eCIsInRyZWF0QXMiLCJtZXJnZVN0cmF0ZWd5IiwiZXhpc3RpbmciLCJjaGFuZ2VzZXQiLCJjcmVhdGUiLCJwcmV0dHkiLCJrZWVwT3JkZXIiLCJyZXNvbHZlIiwia2V5cyIsImxlbmd0aCIsInRhcmdldEV4aXN0cyIsImV4aXN0c1N5bmMiLCJleHQiLCJjdXJyZW50Q29udGVudCIsIm1lcmdlZENvbnRlbnQiLCJlbnN1cmVEaXJTeW5jIiwiZGlybmFtZSIsImNvbnRlbnRTdHJpbmciLCJkdW1wIiwiSlNPTiIsImpvaW4iLCJ3cml0ZUZpbGVTeW5jIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRyxPQUFPLEdBQUdILE9BQU8sQ0FBQyxnQkFBRCxDQUF2Qjs7QUFDQSxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxrQkFBRCxDQUF6Qjs7QUFDQSxNQUFNSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxVQUFELENBQXZCOztBQUNBLE1BQU1NLFNBQVMsR0FBR04sT0FBTyxDQUFDLCtCQUFELENBQXpCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLFlBQUQsQ0FB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dWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBpc0VxdWFsID0gcmVxdWlyZSgnbG9kYXNoLmlzZXF1YWwnKTtcbmNvbnN0IGNsb25lRGVlcCA9IHJlcXVpcmUoJ2xvZGFzaC5jbG9uZWRlZXAnKTtcbmNvbnN0IGZzRXh0cmEgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuY29uc3Qgc3RyaW5naWZ5ID0gcmVxdWlyZSgnanNvbi1zdHJpbmdpZnktcHJldHR5LWNvbXBhY3QnKTtcbmNvbnN0IHlhbWwgPSByZXF1aXJlKCd5YW1sLWJvb3N0Jyk7XG5jb25zdCBvYmplY3RBbGlnbiA9IHJlcXVpcmUoJ29iamVjdC1hbGlnbicpO1xuY29uc3Qgc21hcnRSZWFkID0gcmVxdWlyZSgnLi9zbWFydC1yZWFkJyk7XG5jb25zdCB4bWxQYXJzZXIgPSByZXF1aXJlKCcuLi91dGlsL3htbC1wYXJzZXInKTtcbmNvbnN0IGdldEV4dCA9IHJlcXVpcmUoJy4uL3V0aWwvZ2V0LWV4dCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmaWxlcGF0aCwgY29udGVudCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGFzc2VydCh0eXBlb2YgZmlsZXBhdGggPT09ICdzdHJpbmcnKTtcbiAgYXNzZXJ0KGNvbnRlbnQgaW5zdGFuY2VvZiBPYmplY3QpO1xuICBhc3NlcnQob3B0aW9ucyBpbnN0YW5jZW9mIE9iamVjdCAmJiAhQXJyYXkuaXNBcnJheShvcHRpb25zKSk7XG5cbiAgY29uc3QgY3R4ID0ge1xuICAgIHRyZWF0QXM6IG51bGwsXG4gICAgbWVyZ2VTdHJhdGVneTogKGV4aXN0aW5nLCBjaGFuZ2VzZXQpID0+IGNoYW5nZXNldCxcbiAgICBjcmVhdGU6IHRydWUsXG4gICAgcHJldHR5OiBmYWxzZSxcbiAgICBrZWVwT3JkZXI6IHRydWUsXG4gICAgcmVzb2x2ZTogZmFsc2UsXG4gICAgLi4ub3B0aW9uc1xuICB9O1xuICBhc3NlcnQoT2JqZWN0LmtleXMoY3R4KS5sZW5ndGggPT09IDYsICdVbmV4cGVjdGVkIE9wdGlvbiBwcm92aWRlZCEnKTtcbiAgYXNzZXJ0KGN0eC50cmVhdEFzID09PSBudWxsIHx8IHR5cGVvZiBjdHgudHJlYXRBcyA9PT0gJ3N0cmluZycpO1xuICBhc3NlcnQodHlwZW9mIGN0eC5tZXJnZVN0cmF0ZWd5ID09PSAnZnVuY3Rpb24nKTtcbiAgYXNzZXJ0KHR5cGVvZiBjdHguY3JlYXRlID09PSAnYm9vbGVhbicpO1xuICBhc3NlcnQodHlwZW9mIGN0eC5wcmV0dHkgPT09ICdib29sZWFuJyk7XG4gIGFzc2VydCh0eXBlb2YgY3R4LmtlZXBPcmRlciA9PT0gJ2Jvb2xlYW4nKTtcbiAgYXNzZXJ0KHR5cGVvZiBjdHgucmVzb2x2ZSA9PT0gJ2Jvb2xlYW4nKTtcblxuICBjb25zdCB0YXJnZXRFeGlzdHMgPSBmcy5leGlzdHNTeW5jKGZpbGVwYXRoKTtcbiAgaWYgKGN0eC5jcmVhdGUgIT09IHRydWUgJiYgIXRhcmdldEV4aXN0cykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGV4dCA9IGdldEV4dChmaWxlcGF0aCk7XG4gIGNvbnN0IGN1cnJlbnRDb250ZW50ID0gdGFyZ2V0RXhpc3RzXG4gICAgPyBzbWFydFJlYWQoZmlsZXBhdGgsIHtcbiAgICAgIHRyZWF0QXM6IGN0eC50cmVhdEFzID09PSBudWxsICYmIGV4dCA9PT0gJ2pzJyA/ICd0eHQnIDogY3R4LnRyZWF0QXMsXG4gICAgICByZXNvbHZlOiBjdHgucmVzb2x2ZVxuICAgIH0pXG4gICAgOiBudWxsO1xuXG4gIGNvbnN0IG1lcmdlZENvbnRlbnQgPSBjdXJyZW50Q29udGVudCA9PSBudWxsXG4gICAgPyBjb250ZW50XG4gICAgOiBjdHgubWVyZ2VTdHJhdGVneShjbG9uZURlZXAoY3VycmVudENvbnRlbnQpLCBjbG9uZURlZXAoY29udGVudCkpO1xuXG4gIGlmICghaXNFcXVhbChjdXJyZW50Q29udGVudCwgbWVyZ2VkQ29udGVudCkpIHtcbiAgICBmc0V4dHJhLmVuc3VyZURpclN5bmMocGF0aC5kaXJuYW1lKGZpbGVwYXRoKSk7XG4gICAgaWYgKGN0eC5rZWVwT3JkZXIpIHtcbiAgICAgIG9iamVjdEFsaWduKG1lcmdlZENvbnRlbnQsIGN1cnJlbnRDb250ZW50KTtcbiAgICB9XG4gICAgbGV0IGNvbnRlbnRTdHJpbmc7XG4gICAgc3dpdGNoIChjdHgudHJlYXRBcyB8fCBleHQpIHtcbiAgICAgIGNhc2UgJ3ltbCc6XG4gICAgICBjYXNlICd5YW1sJzpcbiAgICAgICAgY29udGVudFN0cmluZyA9IHlhbWwuZHVtcChtZXJnZWRDb250ZW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd4bWwnOlxuICAgICAgICBjb250ZW50U3RyaW5nID0geG1sUGFyc2VyLnN0cmluZ2lmeShtZXJnZWRDb250ZW50LCBvcHRpb25zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgY29udGVudFN0cmluZyA9IGAke2N0eC5wcmV0dHlcbiAgICAgICAgICA/IHN0cmluZ2lmeShtZXJnZWRDb250ZW50KVxuICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkobWVyZ2VkQ29udGVudCwgbnVsbCwgMil9XFxuYDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShtZXJnZWRDb250ZW50KSk7XG4gICAgICAgIGNvbnRlbnRTdHJpbmcgPSBgJHttZXJnZWRDb250ZW50LmpvaW4oJ1xcbicpfVxcbmA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVwYXRoLCBjb250ZW50U3RyaW5nKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuIl19