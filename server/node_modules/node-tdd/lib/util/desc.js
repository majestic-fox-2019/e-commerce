function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const assert = require('assert');

const path = require('path');

const fs = require('smart-fs');

const callsites = require('callsites');

const get = require('lodash.get');

const minimist = require('minimist');

const tmp = require('tmp');

const Joi = require('joi-strict');

const RequestRecorder = require('../modules/request-recorder');

const EnvManager = require('../modules/env-manager');

const TimeKeeper = require('../modules/time-keeper');

const LogRecorder = require('../modules/log-recorder');

const RandomSeeder = require('../modules/random-seeder');

const {
  getParents,
  genCassetteName
} = require('./mocha-test');

const mocha = {
  it,
  specify,
  describe,
  context,
  before,
  after,
  beforeEach,
  afterEach
};

const desc = (suiteName, optsOrTests, testsOrNull = null) => {
  const opts = testsOrNull === null ? {} : optsOrTests;
  const tests = testsOrNull === null ? optsOrTests : testsOrNull;
  const testFile = path.resolve(callsites()[1].getFileName());

  const resolve = name => path.join(path.dirname(testFile), name.replace(/\$FILENAME/g, path.basename(testFile)));

  Joi.assert(opts, Joi.object().keys({
    useTmpDir: Joi.boolean().optional(),
    useNock: Joi.boolean().optional(),
    nockFolder: Joi.string().optional(),
    fixtureFolder: Joi.string().optional(),
    envVarsFile: Joi.string().optional(),
    envVars: Joi.object().optional().unknown(true).pattern(Joi.string(), Joi.string()),
    timestamp: Joi.number().optional().min(0),
    record: Joi.any().optional(),
    cryptoSeed: Joi.string().optional(),
    timeout: Joi.number().optional().min(0)
  }), 'Bad Options Provided');
  const useTmpDir = get(opts, 'useTmpDir', false);
  const useNock = get(opts, 'useNock', false);
  const nockFolder = resolve(get(opts, 'nockFolder', '$FILENAME__cassettes'));
  const fixtureFolder = resolve(get(opts, 'fixtureFolder', '$FILENAME__fixtures'));
  const envVarsFile = resolve(get(opts, 'envVarsFile', '$FILENAME.env.yml'));
  const envVars = get(opts, 'envVars', null);
  const timestamp = get(opts, 'timestamp', null);
  const record = get(opts, 'record', false);
  const cryptoSeed = get(opts, 'cryptoSeed', null);
  const timeout = get(opts, 'timeout', null);
  const nockHeal = get(minimist(process.argv.slice(2)), 'nock-heal', false);
  let dir = null;
  let requestRecorder = null;
  let envManagerFile = null;
  let envManagerDesc = null;
  let timeKeeper = null;
  let logRecorder = null;
  let randomSeeder = null;

  const getArgs = () => _objectSpread({
    capture: async fn => {
      try {
        await fn();
      } catch (e) {
        return e;
      }

      throw new assert.AssertionError({
        message: 'expected [Function] to throw an error'
      });
    },
    fixture: name => {
      const filepath = fs.guessFile(path.join(fixtureFolder, name));

      if (filepath === null) {
        throw new assert.AssertionError({
          message: `fixture "${name}" not found or ambiguous`
        });
      }

      return fs.smartRead(filepath);
    }
  }, dir === null ? {} : {
    dir
  }, {}, logRecorder === null ? {} : {
    recorder: {
      verbose: logRecorder.verbose,
      get: logRecorder.get,
      reset: logRecorder.reset
    }
  });

  let beforeCb = () => {};

  let afterCb = () => {};

  let beforeEachCb = () => {};

  let afterEachCb = () => {}; // eslint-disable-next-line func-names


  mocha.describe(suiteName, function () {
    return (async () => {
      if (timeout !== null) {
        this.timeout(timeout);
      } // eslint-disable-next-line func-names


      mocha.before(function () {
        return (async () => {
          if (getParents(this.test).length === 3 && fs.existsSync(envVarsFile)) {
            envManagerFile = EnvManager({
              envVars: fs.smartRead(envVarsFile),
              allowOverwrite: false
            });
            envManagerFile.apply();
          }

          if (envVars !== null) {
            envManagerDesc = EnvManager({
              envVars,
              allowOverwrite: false
            });
            envManagerDesc.apply();
          }

          if (timestamp !== null) {
            timeKeeper = TimeKeeper({
              unix: timestamp
            });
            timeKeeper.inject();
          }

          if (cryptoSeed !== null) {
            randomSeeder = RandomSeeder({
              seed: cryptoSeed,
              reseed: false
            });
            randomSeeder.inject();
          }

          if (useNock === true) {
            requestRecorder = RequestRecorder({
              cassetteFolder: `${nockFolder}/`,
              stripHeaders: false,
              strict: true,
              heal: nockHeal
            });
          }

          await beforeCb.call(this);
        })();
      }); // eslint-disable-next-line func-names

      mocha.after(function () {
        return (async () => {
          if (requestRecorder !== null) {
            requestRecorder.shutdown();
            requestRecorder = null;
          }

          if (randomSeeder !== null) {
            randomSeeder.release();
            randomSeeder = null;
          }

          if (timeKeeper !== null) {
            timeKeeper.release();
            timeKeeper = null;
          }

          if (envManagerDesc !== null) {
            envManagerDesc.unapply();
            envManagerDesc = null;
          }

          if (envManagerFile !== null) {
            envManagerFile.unapply();
            envManagerFile = null;
          }

          await afterCb.call(this);
        })();
      }); // eslint-disable-next-line func-names

      mocha.beforeEach(function () {
        return (async () => {
          if (useTmpDir === true) {
            tmp.setGracefulCleanup();
            dir = tmp.dirSync({
              keep: false,
              unsafeCleanup: true
            }).name;
          }

          if (useNock === true) {
            await requestRecorder.inject(genCassetteName(this.currentTest));
          }

          if (record !== false) {
            logRecorder = LogRecorder({
              verbose: process.argv.slice(2).includes('--verbose'),
              logger: record
            });
            logRecorder.inject();
          }

          await beforeEachCb.call(this, getArgs());
        })();
      }); // eslint-disable-next-line func-names

      mocha.afterEach(function () {
        return (async () => {
          if (logRecorder !== null) {
            logRecorder.release();
            logRecorder = null;
          }

          if (requestRecorder !== null) {
            requestRecorder.release();
          }

          if (dir !== null) {
            dir = null;
          }

          await afterEachCb.call(this, getArgs());
        })();
      });
      const globalsPrev = Object.keys(mocha).reduce((p, key) => Object.assign(p, {
        [key]: global[key]
      }));

      global.it = (testName, fn) => mocha.it(testName, fn.length === 0 || /^[^(=]*\({/.test(fn.toString()) // eslint-disable-next-line func-names
      ? function () {
        return fn.call(this, getArgs());
      } // eslint-disable-next-line func-names
      : function (done) {
        return fn.call(this, done);
      });

      global.specify = global.it;
      global.describe = desc;
      global.context = global.describe;

      global.before = fn => {
        beforeCb = fn;
      };

      global.after = fn => {
        afterCb = fn;
      };

      global.beforeEach = fn => {
        beforeEachCb = fn;
      };

      global.afterEach = fn => {
        afterEachCb = fn;
      };

      await tests.call(this);
      Object.entries(globalsPrev).forEach(([k, v]) => {
        global[k] = v;
      });
    })();
  });
};

module.exports = desc;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2Rlc2MuanMiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsInBhdGgiLCJmcyIsImNhbGxzaXRlcyIsImdldCIsIm1pbmltaXN0IiwidG1wIiwiSm9pIiwiUmVxdWVzdFJlY29yZGVyIiwiRW52TWFuYWdlciIsIlRpbWVLZWVwZXIiLCJMb2dSZWNvcmRlciIsIlJhbmRvbVNlZWRlciIsImdldFBhcmVudHMiLCJnZW5DYXNzZXR0ZU5hbWUiLCJtb2NoYSIsIml0Iiwic3BlY2lmeSIsImRlc2NyaWJlIiwiY29udGV4dCIsImJlZm9yZSIsImFmdGVyIiwiYmVmb3JlRWFjaCIsImFmdGVyRWFjaCIsImRlc2MiLCJzdWl0ZU5hbWUiLCJvcHRzT3JUZXN0cyIsInRlc3RzT3JOdWxsIiwib3B0cyIsInRlc3RzIiwidGVzdEZpbGUiLCJyZXNvbHZlIiwiZ2V0RmlsZU5hbWUiLCJuYW1lIiwiam9pbiIsImRpcm5hbWUiLCJyZXBsYWNlIiwiYmFzZW5hbWUiLCJvYmplY3QiLCJrZXlzIiwidXNlVG1wRGlyIiwiYm9vbGVhbiIsIm9wdGlvbmFsIiwidXNlTm9jayIsIm5vY2tGb2xkZXIiLCJzdHJpbmciLCJmaXh0dXJlRm9sZGVyIiwiZW52VmFyc0ZpbGUiLCJlbnZWYXJzIiwidW5rbm93biIsInBhdHRlcm4iLCJ0aW1lc3RhbXAiLCJudW1iZXIiLCJtaW4iLCJyZWNvcmQiLCJhbnkiLCJjcnlwdG9TZWVkIiwidGltZW91dCIsIm5vY2tIZWFsIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsImRpciIsInJlcXVlc3RSZWNvcmRlciIsImVudk1hbmFnZXJGaWxlIiwiZW52TWFuYWdlckRlc2MiLCJ0aW1lS2VlcGVyIiwibG9nUmVjb3JkZXIiLCJyYW5kb21TZWVkZXIiLCJnZXRBcmdzIiwiY2FwdHVyZSIsImZuIiwiZSIsIkFzc2VydGlvbkVycm9yIiwibWVzc2FnZSIsImZpeHR1cmUiLCJmaWxlcGF0aCIsImd1ZXNzRmlsZSIsInNtYXJ0UmVhZCIsInJlY29yZGVyIiwidmVyYm9zZSIsInJlc2V0IiwiYmVmb3JlQ2IiLCJhZnRlckNiIiwiYmVmb3JlRWFjaENiIiwiYWZ0ZXJFYWNoQ2IiLCJ0ZXN0IiwibGVuZ3RoIiwiZXhpc3RzU3luYyIsImFsbG93T3ZlcndyaXRlIiwiYXBwbHkiLCJ1bml4IiwiaW5qZWN0Iiwic2VlZCIsInJlc2VlZCIsImNhc3NldHRlRm9sZGVyIiwic3RyaXBIZWFkZXJzIiwic3RyaWN0IiwiaGVhbCIsImNhbGwiLCJzaHV0ZG93biIsInJlbGVhc2UiLCJ1bmFwcGx5Iiwic2V0R3JhY2VmdWxDbGVhbnVwIiwiZGlyU3luYyIsImtlZXAiLCJ1bnNhZmVDbGVhbnVwIiwiY3VycmVudFRlc3QiLCJpbmNsdWRlcyIsImxvZ2dlciIsImdsb2JhbHNQcmV2IiwiT2JqZWN0IiwicmVkdWNlIiwicCIsImtleSIsImFzc2lnbiIsImdsb2JhbCIsInRlc3ROYW1lIiwidG9TdHJpbmciLCJkb25lIiwiZW50cmllcyIsImZvckVhY2giLCJrIiwidiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxFQUFFLEdBQUdGLE9BQU8sQ0FBQyxVQUFELENBQWxCOztBQUNBLE1BQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBQ0EsTUFBTUksR0FBRyxHQUFHSixPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNSyxRQUFRLEdBQUdMLE9BQU8sQ0FBQyxVQUFELENBQXhCOztBQUNBLE1BQU1NLEdBQUcsR0FBR04sT0FBTyxDQUFDLEtBQUQsQ0FBbkI7O0FBQ0EsTUFBTU8sR0FBRyxHQUFHUCxPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNUSxlQUFlLEdBQUdSLE9BQU8sQ0FBQyw2QkFBRCxDQUEvQjs7QUFDQSxNQUFNUyxVQUFVLEdBQUdULE9BQU8sQ0FBQyx3QkFBRCxDQUExQjs7QUFDQSxNQUFNVSxVQUFVLEdBQUdWLE9BQU8sQ0FBQyx3QkFBRCxDQUExQjs7QUFDQSxNQUFNVyxXQUFXLEdBQUdYLE9BQU8sQ0FBQyx5QkFBRCxDQUEzQjs7QUFDQSxNQUFNWSxZQUFZLEdBQUdaLE9BQU8sQ0FBQywwQkFBRCxDQUE1Qjs7QUFDQSxNQUFNO0FBQUVhLEVBQUFBLFVBQUY7QUFBY0MsRUFBQUE7QUFBZCxJQUFrQ2QsT0FBTyxDQUFDLGNBQUQsQ0FBL0M7O0FBRUEsTUFBTWUsS0FBSyxHQUFHO0FBQ1pDLEVBQUFBLEVBRFk7QUFFWkMsRUFBQUEsT0FGWTtBQUdaQyxFQUFBQSxRQUhZO0FBSVpDLEVBQUFBLE9BSlk7QUFLWkMsRUFBQUEsTUFMWTtBQU1aQyxFQUFBQSxLQU5ZO0FBT1pDLEVBQUFBLFVBUFk7QUFRWkMsRUFBQUE7QUFSWSxDQUFkOztBQVdBLE1BQU1DLElBQUksR0FBRyxDQUFDQyxTQUFELEVBQVlDLFdBQVosRUFBeUJDLFdBQVcsR0FBRyxJQUF2QyxLQUFnRDtBQUMzRCxRQUFNQyxJQUFJLEdBQUdELFdBQVcsS0FBSyxJQUFoQixHQUF1QixFQUF2QixHQUE0QkQsV0FBekM7QUFDQSxRQUFNRyxLQUFLLEdBQUdGLFdBQVcsS0FBSyxJQUFoQixHQUF1QkQsV0FBdkIsR0FBcUNDLFdBQW5EO0FBRUEsUUFBTUcsUUFBUSxHQUFHN0IsSUFBSSxDQUFDOEIsT0FBTCxDQUFhNUIsU0FBUyxHQUFHLENBQUgsQ0FBVCxDQUFlNkIsV0FBZixFQUFiLENBQWpCOztBQUNBLFFBQU1ELE9BQU8sR0FBSUUsSUFBRCxJQUFVaEMsSUFBSSxDQUFDaUMsSUFBTCxDQUN4QmpDLElBQUksQ0FBQ2tDLE9BQUwsQ0FBYUwsUUFBYixDQUR3QixFQUV4QkcsSUFBSSxDQUFDRyxPQUFMLENBQWEsYUFBYixFQUE0Qm5DLElBQUksQ0FBQ29DLFFBQUwsQ0FBY1AsUUFBZCxDQUE1QixDQUZ3QixDQUExQjs7QUFLQXZCLEVBQUFBLEdBQUcsQ0FBQ1IsTUFBSixDQUFXNkIsSUFBWCxFQUFpQnJCLEdBQUcsQ0FBQytCLE1BQUosR0FBYUMsSUFBYixDQUFrQjtBQUNqQ0MsSUFBQUEsU0FBUyxFQUFFakMsR0FBRyxDQUFDa0MsT0FBSixHQUFjQyxRQUFkLEVBRHNCO0FBRWpDQyxJQUFBQSxPQUFPLEVBQUVwQyxHQUFHLENBQUNrQyxPQUFKLEdBQWNDLFFBQWQsRUFGd0I7QUFHakNFLElBQUFBLFVBQVUsRUFBRXJDLEdBQUcsQ0FBQ3NDLE1BQUosR0FBYUgsUUFBYixFQUhxQjtBQUlqQ0ksSUFBQUEsYUFBYSxFQUFFdkMsR0FBRyxDQUFDc0MsTUFBSixHQUFhSCxRQUFiLEVBSmtCO0FBS2pDSyxJQUFBQSxXQUFXLEVBQUV4QyxHQUFHLENBQUNzQyxNQUFKLEdBQWFILFFBQWIsRUFMb0I7QUFNakNNLElBQUFBLE9BQU8sRUFBRXpDLEdBQUcsQ0FBQytCLE1BQUosR0FBYUksUUFBYixHQUF3Qk8sT0FBeEIsQ0FBZ0MsSUFBaEMsRUFBc0NDLE9BQXRDLENBQThDM0MsR0FBRyxDQUFDc0MsTUFBSixFQUE5QyxFQUE0RHRDLEdBQUcsQ0FBQ3NDLE1BQUosRUFBNUQsQ0FOd0I7QUFPakNNLElBQUFBLFNBQVMsRUFBRTVDLEdBQUcsQ0FBQzZDLE1BQUosR0FBYVYsUUFBYixHQUF3QlcsR0FBeEIsQ0FBNEIsQ0FBNUIsQ0FQc0I7QUFRakNDLElBQUFBLE1BQU0sRUFBRS9DLEdBQUcsQ0FBQ2dELEdBQUosR0FBVWIsUUFBVixFQVJ5QjtBQVNqQ2MsSUFBQUEsVUFBVSxFQUFFakQsR0FBRyxDQUFDc0MsTUFBSixHQUFhSCxRQUFiLEVBVHFCO0FBVWpDZSxJQUFBQSxPQUFPLEVBQUVsRCxHQUFHLENBQUM2QyxNQUFKLEdBQWFWLFFBQWIsR0FBd0JXLEdBQXhCLENBQTRCLENBQTVCO0FBVndCLEdBQWxCLENBQWpCLEVBV0ksc0JBWEo7QUFZQSxRQUFNYixTQUFTLEdBQUdwQyxHQUFHLENBQUN3QixJQUFELEVBQU8sV0FBUCxFQUFvQixLQUFwQixDQUFyQjtBQUNBLFFBQU1lLE9BQU8sR0FBR3ZDLEdBQUcsQ0FBQ3dCLElBQUQsRUFBTyxTQUFQLEVBQWtCLEtBQWxCLENBQW5CO0FBQ0EsUUFBTWdCLFVBQVUsR0FBR2IsT0FBTyxDQUFDM0IsR0FBRyxDQUFDd0IsSUFBRCxFQUFPLFlBQVAsRUFBcUIsc0JBQXJCLENBQUosQ0FBMUI7QUFDQSxRQUFNa0IsYUFBYSxHQUFHZixPQUFPLENBQUMzQixHQUFHLENBQUN3QixJQUFELEVBQU8sZUFBUCxFQUF3QixxQkFBeEIsQ0FBSixDQUE3QjtBQUNBLFFBQU1tQixXQUFXLEdBQUdoQixPQUFPLENBQUMzQixHQUFHLENBQUN3QixJQUFELEVBQU8sYUFBUCxFQUFzQixtQkFBdEIsQ0FBSixDQUEzQjtBQUNBLFFBQU1vQixPQUFPLEdBQUc1QyxHQUFHLENBQUN3QixJQUFELEVBQU8sU0FBUCxFQUFrQixJQUFsQixDQUFuQjtBQUNBLFFBQU11QixTQUFTLEdBQUcvQyxHQUFHLENBQUN3QixJQUFELEVBQU8sV0FBUCxFQUFvQixJQUFwQixDQUFyQjtBQUNBLFFBQU0wQixNQUFNLEdBQUdsRCxHQUFHLENBQUN3QixJQUFELEVBQU8sUUFBUCxFQUFpQixLQUFqQixDQUFsQjtBQUNBLFFBQU00QixVQUFVLEdBQUdwRCxHQUFHLENBQUN3QixJQUFELEVBQU8sWUFBUCxFQUFxQixJQUFyQixDQUF0QjtBQUNBLFFBQU02QixPQUFPLEdBQUdyRCxHQUFHLENBQUN3QixJQUFELEVBQU8sU0FBUCxFQUFrQixJQUFsQixDQUFuQjtBQUNBLFFBQU04QixRQUFRLEdBQUd0RCxHQUFHLENBQUNDLFFBQVEsQ0FBQ3NELE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxLQUFiLENBQW1CLENBQW5CLENBQUQsQ0FBVCxFQUFrQyxXQUFsQyxFQUErQyxLQUEvQyxDQUFwQjtBQUVBLE1BQUlDLEdBQUcsR0FBRyxJQUFWO0FBQ0EsTUFBSUMsZUFBZSxHQUFHLElBQXRCO0FBQ0EsTUFBSUMsY0FBYyxHQUFHLElBQXJCO0FBQ0EsTUFBSUMsY0FBYyxHQUFHLElBQXJCO0FBQ0EsTUFBSUMsVUFBVSxHQUFHLElBQWpCO0FBQ0EsTUFBSUMsV0FBVyxHQUFHLElBQWxCO0FBQ0EsTUFBSUMsWUFBWSxHQUFHLElBQW5COztBQUVBLFFBQU1DLE9BQU8sR0FBRztBQUNkQyxJQUFBQSxPQUFPLEVBQUUsTUFBT0MsRUFBUCxJQUFjO0FBQ3JCLFVBQUk7QUFDRixjQUFNQSxFQUFFLEVBQVI7QUFDRCxPQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsZUFBT0EsQ0FBUDtBQUNEOztBQUNELFlBQU0sSUFBSXpFLE1BQU0sQ0FBQzBFLGNBQVgsQ0FBMEI7QUFBRUMsUUFBQUEsT0FBTyxFQUFFO0FBQVgsT0FBMUIsQ0FBTjtBQUNELEtBUmE7QUFTZEMsSUFBQUEsT0FBTyxFQUFHMUMsSUFBRCxJQUFVO0FBQ2pCLFlBQU0yQyxRQUFRLEdBQUcxRSxFQUFFLENBQUMyRSxTQUFILENBQWE1RSxJQUFJLENBQUNpQyxJQUFMLENBQVVZLGFBQVYsRUFBeUJiLElBQXpCLENBQWIsQ0FBakI7O0FBQ0EsVUFBSTJDLFFBQVEsS0FBSyxJQUFqQixFQUF1QjtBQUNyQixjQUFNLElBQUk3RSxNQUFNLENBQUMwRSxjQUFYLENBQTBCO0FBQUVDLFVBQUFBLE9BQU8sRUFBRyxZQUFXekMsSUFBSztBQUE1QixTQUExQixDQUFOO0FBQ0Q7O0FBQ0QsYUFBTy9CLEVBQUUsQ0FBQzRFLFNBQUgsQ0FBYUYsUUFBYixDQUFQO0FBQ0Q7QUFmYSxLQWdCVmQsR0FBRyxLQUFLLElBQVIsR0FBZSxFQUFmLEdBQW9CO0FBQUVBLElBQUFBO0FBQUYsR0FoQlYsTUFpQlZLLFdBQVcsS0FBSyxJQUFoQixHQUF1QixFQUF2QixHQUE0QjtBQUM5QlksSUFBQUEsUUFBUSxFQUFFO0FBQ1JDLE1BQUFBLE9BQU8sRUFBRWIsV0FBVyxDQUFDYSxPQURiO0FBRVI1RSxNQUFBQSxHQUFHLEVBQUUrRCxXQUFXLENBQUMvRCxHQUZUO0FBR1I2RSxNQUFBQSxLQUFLLEVBQUVkLFdBQVcsQ0FBQ2M7QUFIWDtBQURvQixHQWpCbEIsQ0FBaEI7O0FBeUJBLE1BQUlDLFFBQVEsR0FBRyxNQUFNLENBQUUsQ0FBdkI7O0FBQ0EsTUFBSUMsT0FBTyxHQUFHLE1BQU0sQ0FBRSxDQUF0Qjs7QUFDQSxNQUFJQyxZQUFZLEdBQUcsTUFBTSxDQUFFLENBQTNCOztBQUNBLE1BQUlDLFdBQVcsR0FBRyxNQUFNLENBQUUsQ0FBMUIsQ0F0RTJELENBd0UzRDs7O0FBQ0F0RSxFQUFBQSxLQUFLLENBQUNHLFFBQU4sQ0FBZU8sU0FBZixFQUEwQixZQUFZO0FBQ3BDLFdBQU8sQ0FBQyxZQUFZO0FBQ2xCLFVBQUlnQyxPQUFPLEtBQUssSUFBaEIsRUFBc0I7QUFDcEIsYUFBS0EsT0FBTCxDQUFhQSxPQUFiO0FBQ0QsT0FIaUIsQ0FLbEI7OztBQUNBMUMsTUFBQUEsS0FBSyxDQUFDSyxNQUFOLENBQWEsWUFBWTtBQUN2QixlQUFPLENBQUMsWUFBWTtBQUNsQixjQUFJUCxVQUFVLENBQUMsS0FBS3lFLElBQU4sQ0FBVixDQUFzQkMsTUFBdEIsS0FBaUMsQ0FBakMsSUFBc0NyRixFQUFFLENBQUNzRixVQUFILENBQWN6QyxXQUFkLENBQTFDLEVBQXNFO0FBQ3BFaUIsWUFBQUEsY0FBYyxHQUFHdkQsVUFBVSxDQUFDO0FBQUV1QyxjQUFBQSxPQUFPLEVBQUU5QyxFQUFFLENBQUM0RSxTQUFILENBQWEvQixXQUFiLENBQVg7QUFBc0MwQyxjQUFBQSxjQUFjLEVBQUU7QUFBdEQsYUFBRCxDQUEzQjtBQUNBekIsWUFBQUEsY0FBYyxDQUFDMEIsS0FBZjtBQUNEOztBQUNELGNBQUkxQyxPQUFPLEtBQUssSUFBaEIsRUFBc0I7QUFDcEJpQixZQUFBQSxjQUFjLEdBQUd4RCxVQUFVLENBQUM7QUFBRXVDLGNBQUFBLE9BQUY7QUFBV3lDLGNBQUFBLGNBQWMsRUFBRTtBQUEzQixhQUFELENBQTNCO0FBQ0F4QixZQUFBQSxjQUFjLENBQUN5QixLQUFmO0FBQ0Q7O0FBQ0QsY0FBSXZDLFNBQVMsS0FBSyxJQUFsQixFQUF3QjtBQUN0QmUsWUFBQUEsVUFBVSxHQUFHeEQsVUFBVSxDQUFDO0FBQUVpRixjQUFBQSxJQUFJLEVBQUV4QztBQUFSLGFBQUQsQ0FBdkI7QUFDQWUsWUFBQUEsVUFBVSxDQUFDMEIsTUFBWDtBQUNEOztBQUNELGNBQUlwQyxVQUFVLEtBQUssSUFBbkIsRUFBeUI7QUFDdkJZLFlBQUFBLFlBQVksR0FBR3hELFlBQVksQ0FBQztBQUFFaUYsY0FBQUEsSUFBSSxFQUFFckMsVUFBUjtBQUFvQnNDLGNBQUFBLE1BQU0sRUFBRTtBQUE1QixhQUFELENBQTNCO0FBQ0ExQixZQUFBQSxZQUFZLENBQUN3QixNQUFiO0FBQ0Q7O0FBQ0QsY0FBSWpELE9BQU8sS0FBSyxJQUFoQixFQUFzQjtBQUNwQm9CLFlBQUFBLGVBQWUsR0FBR3ZELGVBQWUsQ0FBQztBQUNoQ3VGLGNBQUFBLGNBQWMsRUFBRyxHQUFFbkQsVUFBVyxHQURFO0FBRWhDb0QsY0FBQUEsWUFBWSxFQUFFLEtBRmtCO0FBR2hDQyxjQUFBQSxNQUFNLEVBQUUsSUFId0I7QUFJaENDLGNBQUFBLElBQUksRUFBRXhDO0FBSjBCLGFBQUQsQ0FBakM7QUFNRDs7QUFDRCxnQkFBTXdCLFFBQVEsQ0FBQ2lCLElBQVQsQ0FBYyxJQUFkLENBQU47QUFDRCxTQTFCTSxHQUFQO0FBMkJELE9BNUJELEVBTmtCLENBb0NsQjs7QUFDQXBGLE1BQUFBLEtBQUssQ0FBQ00sS0FBTixDQUFZLFlBQVk7QUFDdEIsZUFBTyxDQUFDLFlBQVk7QUFDbEIsY0FBSTBDLGVBQWUsS0FBSyxJQUF4QixFQUE4QjtBQUM1QkEsWUFBQUEsZUFBZSxDQUFDcUMsUUFBaEI7QUFDQXJDLFlBQUFBLGVBQWUsR0FBRyxJQUFsQjtBQUNEOztBQUNELGNBQUlLLFlBQVksS0FBSyxJQUFyQixFQUEyQjtBQUN6QkEsWUFBQUEsWUFBWSxDQUFDaUMsT0FBYjtBQUNBakMsWUFBQUEsWUFBWSxHQUFHLElBQWY7QUFDRDs7QUFDRCxjQUFJRixVQUFVLEtBQUssSUFBbkIsRUFBeUI7QUFDdkJBLFlBQUFBLFVBQVUsQ0FBQ21DLE9BQVg7QUFDQW5DLFlBQUFBLFVBQVUsR0FBRyxJQUFiO0FBQ0Q7O0FBQ0QsY0FBSUQsY0FBYyxLQUFLLElBQXZCLEVBQTZCO0FBQzNCQSxZQUFBQSxjQUFjLENBQUNxQyxPQUFmO0FBQ0FyQyxZQUFBQSxjQUFjLEdBQUcsSUFBakI7QUFDRDs7QUFDRCxjQUFJRCxjQUFjLEtBQUssSUFBdkIsRUFBNkI7QUFDM0JBLFlBQUFBLGNBQWMsQ0FBQ3NDLE9BQWY7QUFDQXRDLFlBQUFBLGNBQWMsR0FBRyxJQUFqQjtBQUNEOztBQUNELGdCQUFNbUIsT0FBTyxDQUFDZ0IsSUFBUixDQUFhLElBQWIsQ0FBTjtBQUNELFNBdEJNLEdBQVA7QUF1QkQsT0F4QkQsRUFyQ2tCLENBK0RsQjs7QUFDQXBGLE1BQUFBLEtBQUssQ0FBQ08sVUFBTixDQUFpQixZQUFZO0FBQzNCLGVBQU8sQ0FBQyxZQUFZO0FBQ2xCLGNBQUlrQixTQUFTLEtBQUssSUFBbEIsRUFBd0I7QUFDdEJsQyxZQUFBQSxHQUFHLENBQUNpRyxrQkFBSjtBQUNBekMsWUFBQUEsR0FBRyxHQUFHeEQsR0FBRyxDQUFDa0csT0FBSixDQUFZO0FBQUVDLGNBQUFBLElBQUksRUFBRSxLQUFSO0FBQWVDLGNBQUFBLGFBQWEsRUFBRTtBQUE5QixhQUFaLEVBQWtEekUsSUFBeEQ7QUFDRDs7QUFDRCxjQUFJVSxPQUFPLEtBQUssSUFBaEIsRUFBc0I7QUFDcEIsa0JBQU1vQixlQUFlLENBQUM2QixNQUFoQixDQUF1QjlFLGVBQWUsQ0FBQyxLQUFLNkYsV0FBTixDQUF0QyxDQUFOO0FBQ0Q7O0FBQ0QsY0FBSXJELE1BQU0sS0FBSyxLQUFmLEVBQXNCO0FBQ3BCYSxZQUFBQSxXQUFXLEdBQUd4RCxXQUFXLENBQUM7QUFDeEJxRSxjQUFBQSxPQUFPLEVBQUVyQixPQUFPLENBQUNDLElBQVIsQ0FBYUMsS0FBYixDQUFtQixDQUFuQixFQUFzQitDLFFBQXRCLENBQStCLFdBQS9CLENBRGU7QUFFeEJDLGNBQUFBLE1BQU0sRUFBRXZEO0FBRmdCLGFBQUQsQ0FBekI7QUFJQWEsWUFBQUEsV0FBVyxDQUFDeUIsTUFBWjtBQUNEOztBQUNELGdCQUFNUixZQUFZLENBQUNlLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0I5QixPQUFPLEVBQS9CLENBQU47QUFDRCxTQWhCTSxHQUFQO0FBaUJELE9BbEJELEVBaEVrQixDQW9GbEI7O0FBQ0F0RCxNQUFBQSxLQUFLLENBQUNRLFNBQU4sQ0FBZ0IsWUFBWTtBQUMxQixlQUFPLENBQUMsWUFBWTtBQUNsQixjQUFJNEMsV0FBVyxLQUFLLElBQXBCLEVBQTBCO0FBQ3hCQSxZQUFBQSxXQUFXLENBQUNrQyxPQUFaO0FBQ0FsQyxZQUFBQSxXQUFXLEdBQUcsSUFBZDtBQUNEOztBQUNELGNBQUlKLGVBQWUsS0FBSyxJQUF4QixFQUE4QjtBQUM1QkEsWUFBQUEsZUFBZSxDQUFDc0MsT0FBaEI7QUFDRDs7QUFDRCxjQUFJdkMsR0FBRyxLQUFLLElBQVosRUFBa0I7QUFDaEJBLFlBQUFBLEdBQUcsR0FBRyxJQUFOO0FBQ0Q7O0FBQ0QsZ0JBQU11QixXQUFXLENBQUNjLElBQVosQ0FBaUIsSUFBakIsRUFBdUI5QixPQUFPLEVBQTlCLENBQU47QUFDRCxTQVpNLEdBQVA7QUFhRCxPQWREO0FBZ0JBLFlBQU15QyxXQUFXLEdBQUdDLE1BQU0sQ0FBQ3hFLElBQVAsQ0FBWXhCLEtBQVosRUFDakJpRyxNQURpQixDQUNWLENBQUNDLENBQUQsRUFBSUMsR0FBSixLQUFZSCxNQUFNLENBQUNJLE1BQVAsQ0FBY0YsQ0FBZCxFQUFpQjtBQUFFLFNBQUNDLEdBQUQsR0FBT0UsTUFBTSxDQUFDRixHQUFEO0FBQWYsT0FBakIsQ0FERixDQUFwQjs7QUFFQUUsTUFBQUEsTUFBTSxDQUFDcEcsRUFBUCxHQUFZLENBQUNxRyxRQUFELEVBQVc5QyxFQUFYLEtBQWtCeEQsS0FBSyxDQUFDQyxFQUFOLENBQzVCcUcsUUFENEIsRUFFNUI5QyxFQUFFLENBQUNnQixNQUFILEtBQWMsQ0FBZCxJQUFtQixhQUFhRCxJQUFiLENBQWtCZixFQUFFLENBQUMrQyxRQUFILEVBQWxCLENBQW5CLENBQ0U7QUFERixRQUVJLFlBQVk7QUFDWixlQUFPL0MsRUFBRSxDQUFDNEIsSUFBSCxDQUFRLElBQVIsRUFBYzlCLE9BQU8sRUFBckIsQ0FBUDtBQUNELE9BSkgsQ0FLRTtBQUxGLFFBTUksVUFBVWtELElBQVYsRUFBZ0I7QUFDaEIsZUFBT2hELEVBQUUsQ0FBQzRCLElBQUgsQ0FBUSxJQUFSLEVBQWNvQixJQUFkLENBQVA7QUFDRCxPQVZ5QixDQUE5Qjs7QUFZQUgsTUFBQUEsTUFBTSxDQUFDbkcsT0FBUCxHQUFpQm1HLE1BQU0sQ0FBQ3BHLEVBQXhCO0FBQ0FvRyxNQUFBQSxNQUFNLENBQUNsRyxRQUFQLEdBQWtCTSxJQUFsQjtBQUNBNEYsTUFBQUEsTUFBTSxDQUFDakcsT0FBUCxHQUFpQmlHLE1BQU0sQ0FBQ2xHLFFBQXhCOztBQUNBa0csTUFBQUEsTUFBTSxDQUFDaEcsTUFBUCxHQUFpQm1ELEVBQUQsSUFBUTtBQUN0QlcsUUFBQUEsUUFBUSxHQUFHWCxFQUFYO0FBQ0QsT0FGRDs7QUFHQTZDLE1BQUFBLE1BQU0sQ0FBQy9GLEtBQVAsR0FBZ0JrRCxFQUFELElBQVE7QUFDckJZLFFBQUFBLE9BQU8sR0FBR1osRUFBVjtBQUNELE9BRkQ7O0FBR0E2QyxNQUFBQSxNQUFNLENBQUM5RixVQUFQLEdBQXFCaUQsRUFBRCxJQUFRO0FBQzFCYSxRQUFBQSxZQUFZLEdBQUdiLEVBQWY7QUFDRCxPQUZEOztBQUdBNkMsTUFBQUEsTUFBTSxDQUFDN0YsU0FBUCxHQUFvQmdELEVBQUQsSUFBUTtBQUN6QmMsUUFBQUEsV0FBVyxHQUFHZCxFQUFkO0FBQ0QsT0FGRDs7QUFHQSxZQUFNMUMsS0FBSyxDQUFDc0UsSUFBTixDQUFXLElBQVgsQ0FBTjtBQUNBWSxNQUFBQSxNQUFNLENBQUNTLE9BQVAsQ0FBZVYsV0FBZixFQUE0QlcsT0FBNUIsQ0FBb0MsQ0FBQyxDQUFDQyxDQUFELEVBQUlDLENBQUosQ0FBRCxLQUFZO0FBQzlDUCxRQUFBQSxNQUFNLENBQUNNLENBQUQsQ0FBTixHQUFZQyxDQUFaO0FBQ0QsT0FGRDtBQUdELEtBdElNLEdBQVA7QUF1SUQsR0F4SUQ7QUF5SUQsQ0FsTkQ7O0FBbU5BQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJyRyxJQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnc21hcnQtZnMnKTtcbmNvbnN0IGNhbGxzaXRlcyA9IHJlcXVpcmUoJ2NhbGxzaXRlcycpO1xuY29uc3QgZ2V0ID0gcmVxdWlyZSgnbG9kYXNoLmdldCcpO1xuY29uc3QgbWluaW1pc3QgPSByZXF1aXJlKCdtaW5pbWlzdCcpO1xuY29uc3QgdG1wID0gcmVxdWlyZSgndG1wJyk7XG5jb25zdCBKb2kgPSByZXF1aXJlKCdqb2ktc3RyaWN0Jyk7XG5jb25zdCBSZXF1ZXN0UmVjb3JkZXIgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3JlcXVlc3QtcmVjb3JkZXInKTtcbmNvbnN0IEVudk1hbmFnZXIgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2Vudi1tYW5hZ2VyJyk7XG5jb25zdCBUaW1lS2VlcGVyID0gcmVxdWlyZSgnLi4vbW9kdWxlcy90aW1lLWtlZXBlcicpO1xuY29uc3QgTG9nUmVjb3JkZXIgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2xvZy1yZWNvcmRlcicpO1xuY29uc3QgUmFuZG9tU2VlZGVyID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9yYW5kb20tc2VlZGVyJyk7XG5jb25zdCB7IGdldFBhcmVudHMsIGdlbkNhc3NldHRlTmFtZSB9ID0gcmVxdWlyZSgnLi9tb2NoYS10ZXN0Jyk7XG5cbmNvbnN0IG1vY2hhID0ge1xuICBpdCxcbiAgc3BlY2lmeSxcbiAgZGVzY3JpYmUsXG4gIGNvbnRleHQsXG4gIGJlZm9yZSxcbiAgYWZ0ZXIsXG4gIGJlZm9yZUVhY2gsXG4gIGFmdGVyRWFjaFxufTtcblxuY29uc3QgZGVzYyA9IChzdWl0ZU5hbWUsIG9wdHNPclRlc3RzLCB0ZXN0c09yTnVsbCA9IG51bGwpID0+IHtcbiAgY29uc3Qgb3B0cyA9IHRlc3RzT3JOdWxsID09PSBudWxsID8ge30gOiBvcHRzT3JUZXN0cztcbiAgY29uc3QgdGVzdHMgPSB0ZXN0c09yTnVsbCA9PT0gbnVsbCA/IG9wdHNPclRlc3RzIDogdGVzdHNPck51bGw7XG5cbiAgY29uc3QgdGVzdEZpbGUgPSBwYXRoLnJlc29sdmUoY2FsbHNpdGVzKClbMV0uZ2V0RmlsZU5hbWUoKSk7XG4gIGNvbnN0IHJlc29sdmUgPSAobmFtZSkgPT4gcGF0aC5qb2luKFxuICAgIHBhdGguZGlybmFtZSh0ZXN0RmlsZSksXG4gICAgbmFtZS5yZXBsYWNlKC9cXCRGSUxFTkFNRS9nLCBwYXRoLmJhc2VuYW1lKHRlc3RGaWxlKSlcbiAgKTtcblxuICBKb2kuYXNzZXJ0KG9wdHMsIEpvaS5vYmplY3QoKS5rZXlzKHtcbiAgICB1c2VUbXBEaXI6IEpvaS5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgICB1c2VOb2NrOiBKb2kuYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gICAgbm9ja0ZvbGRlcjogSm9pLnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgZml4dHVyZUZvbGRlcjogSm9pLnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgZW52VmFyc0ZpbGU6IEpvaS5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGVudlZhcnM6IEpvaS5vYmplY3QoKS5vcHRpb25hbCgpLnVua25vd24odHJ1ZSkucGF0dGVybihKb2kuc3RyaW5nKCksIEpvaS5zdHJpbmcoKSksXG4gICAgdGltZXN0YW1wOiBKb2kubnVtYmVyKCkub3B0aW9uYWwoKS5taW4oMCksXG4gICAgcmVjb3JkOiBKb2kuYW55KCkub3B0aW9uYWwoKSxcbiAgICBjcnlwdG9TZWVkOiBKb2kuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB0aW1lb3V0OiBKb2kubnVtYmVyKCkub3B0aW9uYWwoKS5taW4oMClcbiAgfSksICdCYWQgT3B0aW9ucyBQcm92aWRlZCcpO1xuICBjb25zdCB1c2VUbXBEaXIgPSBnZXQob3B0cywgJ3VzZVRtcERpcicsIGZhbHNlKTtcbiAgY29uc3QgdXNlTm9jayA9IGdldChvcHRzLCAndXNlTm9jaycsIGZhbHNlKTtcbiAgY29uc3Qgbm9ja0ZvbGRlciA9IHJlc29sdmUoZ2V0KG9wdHMsICdub2NrRm9sZGVyJywgJyRGSUxFTkFNRV9fY2Fzc2V0dGVzJykpO1xuICBjb25zdCBmaXh0dXJlRm9sZGVyID0gcmVzb2x2ZShnZXQob3B0cywgJ2ZpeHR1cmVGb2xkZXInLCAnJEZJTEVOQU1FX19maXh0dXJlcycpKTtcbiAgY29uc3QgZW52VmFyc0ZpbGUgPSByZXNvbHZlKGdldChvcHRzLCAnZW52VmFyc0ZpbGUnLCAnJEZJTEVOQU1FLmVudi55bWwnKSk7XG4gIGNvbnN0IGVudlZhcnMgPSBnZXQob3B0cywgJ2VudlZhcnMnLCBudWxsKTtcbiAgY29uc3QgdGltZXN0YW1wID0gZ2V0KG9wdHMsICd0aW1lc3RhbXAnLCBudWxsKTtcbiAgY29uc3QgcmVjb3JkID0gZ2V0KG9wdHMsICdyZWNvcmQnLCBmYWxzZSk7XG4gIGNvbnN0IGNyeXB0b1NlZWQgPSBnZXQob3B0cywgJ2NyeXB0b1NlZWQnLCBudWxsKTtcbiAgY29uc3QgdGltZW91dCA9IGdldChvcHRzLCAndGltZW91dCcsIG51bGwpO1xuICBjb25zdCBub2NrSGVhbCA9IGdldChtaW5pbWlzdChwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpLCAnbm9jay1oZWFsJywgZmFsc2UpO1xuXG4gIGxldCBkaXIgPSBudWxsO1xuICBsZXQgcmVxdWVzdFJlY29yZGVyID0gbnVsbDtcbiAgbGV0IGVudk1hbmFnZXJGaWxlID0gbnVsbDtcbiAgbGV0IGVudk1hbmFnZXJEZXNjID0gbnVsbDtcbiAgbGV0IHRpbWVLZWVwZXIgPSBudWxsO1xuICBsZXQgbG9nUmVjb3JkZXIgPSBudWxsO1xuICBsZXQgcmFuZG9tU2VlZGVyID0gbnVsbDtcblxuICBjb25zdCBnZXRBcmdzID0gKCkgPT4gKHtcbiAgICBjYXB0dXJlOiBhc3luYyAoZm4pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7IG1lc3NhZ2U6ICdleHBlY3RlZCBbRnVuY3Rpb25dIHRvIHRocm93IGFuIGVycm9yJyB9KTtcbiAgICB9LFxuICAgIGZpeHR1cmU6IChuYW1lKSA9PiB7XG4gICAgICBjb25zdCBmaWxlcGF0aCA9IGZzLmd1ZXNzRmlsZShwYXRoLmpvaW4oZml4dHVyZUZvbGRlciwgbmFtZSkpO1xuICAgICAgaWYgKGZpbGVwYXRoID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoeyBtZXNzYWdlOiBgZml4dHVyZSBcIiR7bmFtZX1cIiBub3QgZm91bmQgb3IgYW1iaWd1b3VzYCB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcy5zbWFydFJlYWQoZmlsZXBhdGgpO1xuICAgIH0sXG4gICAgLi4uKGRpciA9PT0gbnVsbCA/IHt9IDogeyBkaXIgfSksXG4gICAgLi4uKGxvZ1JlY29yZGVyID09PSBudWxsID8ge30gOiB7XG4gICAgICByZWNvcmRlcjoge1xuICAgICAgICB2ZXJib3NlOiBsb2dSZWNvcmRlci52ZXJib3NlLFxuICAgICAgICBnZXQ6IGxvZ1JlY29yZGVyLmdldCxcbiAgICAgICAgcmVzZXQ6IGxvZ1JlY29yZGVyLnJlc2V0XG4gICAgICB9XG4gICAgfSlcbiAgfSk7XG4gIGxldCBiZWZvcmVDYiA9ICgpID0+IHt9O1xuICBsZXQgYWZ0ZXJDYiA9ICgpID0+IHt9O1xuICBsZXQgYmVmb3JlRWFjaENiID0gKCkgPT4ge307XG4gIGxldCBhZnRlckVhY2hDYiA9ICgpID0+IHt9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIG1vY2hhLmRlc2NyaWJlKHN1aXRlTmFtZSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy50aW1lb3V0KHRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgbW9jaGEuYmVmb3JlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgaWYgKGdldFBhcmVudHModGhpcy50ZXN0KS5sZW5ndGggPT09IDMgJiYgZnMuZXhpc3RzU3luYyhlbnZWYXJzRmlsZSkpIHtcbiAgICAgICAgICAgIGVudk1hbmFnZXJGaWxlID0gRW52TWFuYWdlcih7IGVudlZhcnM6IGZzLnNtYXJ0UmVhZChlbnZWYXJzRmlsZSksIGFsbG93T3ZlcndyaXRlOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIGVudk1hbmFnZXJGaWxlLmFwcGx5KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbnZWYXJzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBlbnZNYW5hZ2VyRGVzYyA9IEVudk1hbmFnZXIoeyBlbnZWYXJzLCBhbGxvd092ZXJ3cml0ZTogZmFsc2UgfSk7XG4gICAgICAgICAgICBlbnZNYW5hZ2VyRGVzYy5hcHBseSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGltZXN0YW1wICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aW1lS2VlcGVyID0gVGltZUtlZXBlcih7IHVuaXg6IHRpbWVzdGFtcCB9KTtcbiAgICAgICAgICAgIHRpbWVLZWVwZXIuaW5qZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjcnlwdG9TZWVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICByYW5kb21TZWVkZXIgPSBSYW5kb21TZWVkZXIoeyBzZWVkOiBjcnlwdG9TZWVkLCByZXNlZWQ6IGZhbHNlIH0pO1xuICAgICAgICAgICAgcmFuZG9tU2VlZGVyLmluamVjdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodXNlTm9jayA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmVxdWVzdFJlY29yZGVyID0gUmVxdWVzdFJlY29yZGVyKHtcbiAgICAgICAgICAgICAgY2Fzc2V0dGVGb2xkZXI6IGAke25vY2tGb2xkZXJ9L2AsXG4gICAgICAgICAgICAgIHN0cmlwSGVhZGVyczogZmFsc2UsXG4gICAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgICAgaGVhbDogbm9ja0hlYWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCBiZWZvcmVDYi5jYWxsKHRoaXMpO1xuICAgICAgICB9KSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBtb2NoYS5hZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGlmIChyZXF1ZXN0UmVjb3JkZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlcXVlc3RSZWNvcmRlci5zaHV0ZG93bigpO1xuICAgICAgICAgICAgcmVxdWVzdFJlY29yZGVyID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJhbmRvbVNlZWRlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmFuZG9tU2VlZGVyLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHJhbmRvbVNlZWRlciA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aW1lS2VlcGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aW1lS2VlcGVyLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHRpbWVLZWVwZXIgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZW52TWFuYWdlckRlc2MgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGVudk1hbmFnZXJEZXNjLnVuYXBwbHkoKTtcbiAgICAgICAgICAgIGVudk1hbmFnZXJEZXNjID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVudk1hbmFnZXJGaWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBlbnZNYW5hZ2VyRmlsZS51bmFwcGx5KCk7XG4gICAgICAgICAgICBlbnZNYW5hZ2VyRmlsZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF3YWl0IGFmdGVyQ2IuY2FsbCh0aGlzKTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgbW9jaGEuYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGlmICh1c2VUbXBEaXIgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRtcC5zZXRHcmFjZWZ1bENsZWFudXAoKTtcbiAgICAgICAgICAgIGRpciA9IHRtcC5kaXJTeW5jKHsga2VlcDogZmFsc2UsIHVuc2FmZUNsZWFudXA6IHRydWUgfSkubmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHVzZU5vY2sgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGF3YWl0IHJlcXVlc3RSZWNvcmRlci5pbmplY3QoZ2VuQ2Fzc2V0dGVOYW1lKHRoaXMuY3VycmVudFRlc3QpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlY29yZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGxvZ1JlY29yZGVyID0gTG9nUmVjb3JkZXIoe1xuICAgICAgICAgICAgICB2ZXJib3NlOiBwcm9jZXNzLmFyZ3Yuc2xpY2UoMikuaW5jbHVkZXMoJy0tdmVyYm9zZScpLFxuICAgICAgICAgICAgICBsb2dnZXI6IHJlY29yZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsb2dSZWNvcmRlci5pbmplY3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXdhaXQgYmVmb3JlRWFjaENiLmNhbGwodGhpcywgZ2V0QXJncygpKTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgbW9jaGEuYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgaWYgKGxvZ1JlY29yZGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsb2dSZWNvcmRlci5yZWxlYXNlKCk7XG4gICAgICAgICAgICBsb2dSZWNvcmRlciA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXF1ZXN0UmVjb3JkZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlcXVlc3RSZWNvcmRlci5yZWxlYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkaXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGRpciA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF3YWl0IGFmdGVyRWFjaENiLmNhbGwodGhpcywgZ2V0QXJncygpKTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBnbG9iYWxzUHJldiA9IE9iamVjdC5rZXlzKG1vY2hhKVxuICAgICAgICAucmVkdWNlKChwLCBrZXkpID0+IE9iamVjdC5hc3NpZ24ocCwgeyBba2V5XTogZ2xvYmFsW2tleV0gfSkpO1xuICAgICAgZ2xvYmFsLml0ID0gKHRlc3ROYW1lLCBmbikgPT4gbW9jaGEuaXQoXG4gICAgICAgIHRlc3ROYW1lLFxuICAgICAgICBmbi5sZW5ndGggPT09IDAgfHwgL15bXig9XSpcXCh7Ly50ZXN0KGZuLnRvU3RyaW5nKCkpXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGdldEFyZ3MoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICAgICAgOiBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZG9uZSk7XG4gICAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIGdsb2JhbC5zcGVjaWZ5ID0gZ2xvYmFsLml0O1xuICAgICAgZ2xvYmFsLmRlc2NyaWJlID0gZGVzYztcbiAgICAgIGdsb2JhbC5jb250ZXh0ID0gZ2xvYmFsLmRlc2NyaWJlO1xuICAgICAgZ2xvYmFsLmJlZm9yZSA9IChmbikgPT4ge1xuICAgICAgICBiZWZvcmVDYiA9IGZuO1xuICAgICAgfTtcbiAgICAgIGdsb2JhbC5hZnRlciA9IChmbikgPT4ge1xuICAgICAgICBhZnRlckNiID0gZm47XG4gICAgICB9O1xuICAgICAgZ2xvYmFsLmJlZm9yZUVhY2ggPSAoZm4pID0+IHtcbiAgICAgICAgYmVmb3JlRWFjaENiID0gZm47XG4gICAgICB9O1xuICAgICAgZ2xvYmFsLmFmdGVyRWFjaCA9IChmbikgPT4ge1xuICAgICAgICBhZnRlckVhY2hDYiA9IGZuO1xuICAgICAgfTtcbiAgICAgIGF3YWl0IHRlc3RzLmNhbGwodGhpcyk7XG4gICAgICBPYmplY3QuZW50cmllcyhnbG9iYWxzUHJldikuZm9yRWFjaCgoW2ssIHZdKSA9PiB7XG4gICAgICAgIGdsb2JhbFtrXSA9IHY7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9KTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGRlc2M7XG4iXX0=