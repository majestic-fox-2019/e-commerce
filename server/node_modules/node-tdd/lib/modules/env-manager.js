const assert = require('assert');

const Joi = require('joi-strict');

const setEnvVar = (key, value) => {
  if ([null, undefined].includes(value)) {
    delete process.env[key];
  } else {
    assert(typeof value === 'string');
    process.env[key] = value;
  }
};

module.exports = opts => {
  Joi.assert(opts, Joi.object().keys({
    envVars: Joi.object().pattern(Joi.string(), Joi.string()),
    allowOverwrite: Joi.boolean()
  }), 'Invalid Options Provided');
  const envVarsOverwritten = {};
  return {
    apply: () => {
      envVarsOverwritten.length = 0;
      Object.entries(opts.envVars).forEach(([key, value]) => {
        const envVar = key.replace(/^\^/, '');

        if (opts.allowOverwrite === true || key.startsWith('^')) {
          envVarsOverwritten[envVar] = process.env[envVar];
        } else {
          assert(process.env[envVar] === undefined, `Environment Variable Set: ${envVar}`);
        }

        setEnvVar(envVar, value);
      });
    },
    unapply: () => {
      Object.keys(opts.envVars).forEach(key => {
        const envVar = key.replace(/^\^/, '');
        assert(typeof process.env[envVar] === 'string', `Environment Variable Set: ${envVar}`);
        setEnvVar(envVar, envVarsOverwritten[envVar]);
      });
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2R1bGVzL2Vudi1tYW5hZ2VyLmpzIl0sIm5hbWVzIjpbImFzc2VydCIsInJlcXVpcmUiLCJKb2kiLCJzZXRFbnZWYXIiLCJrZXkiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsImluY2x1ZGVzIiwicHJvY2VzcyIsImVudiIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRzIiwib2JqZWN0Iiwia2V5cyIsImVudlZhcnMiLCJwYXR0ZXJuIiwic3RyaW5nIiwiYWxsb3dPdmVyd3JpdGUiLCJib29sZWFuIiwiZW52VmFyc092ZXJ3cml0dGVuIiwiYXBwbHkiLCJsZW5ndGgiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImVudlZhciIsInJlcGxhY2UiLCJzdGFydHNXaXRoIiwidW5hcHBseSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUVBLE1BQU1FLFNBQVMsR0FBRyxDQUFDQyxHQUFELEVBQU1DLEtBQU4sS0FBZ0I7QUFDaEMsTUFBSSxDQUFDLElBQUQsRUFBT0MsU0FBUCxFQUFrQkMsUUFBbEIsQ0FBMkJGLEtBQTNCLENBQUosRUFBdUM7QUFDckMsV0FBT0csT0FBTyxDQUFDQyxHQUFSLENBQVlMLEdBQVosQ0FBUDtBQUNELEdBRkQsTUFFTztBQUNMSixJQUFBQSxNQUFNLENBQUMsT0FBT0ssS0FBUCxLQUFpQixRQUFsQixDQUFOO0FBQ0FHLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTCxHQUFaLElBQW1CQyxLQUFuQjtBQUNEO0FBQ0YsQ0FQRDs7QUFTQUssTUFBTSxDQUFDQyxPQUFQLEdBQWtCQyxJQUFELElBQVU7QUFDekJWLEVBQUFBLEdBQUcsQ0FBQ0YsTUFBSixDQUFXWSxJQUFYLEVBQWlCVixHQUFHLENBQUNXLE1BQUosR0FBYUMsSUFBYixDQUFrQjtBQUNqQ0MsSUFBQUEsT0FBTyxFQUFFYixHQUFHLENBQUNXLE1BQUosR0FBYUcsT0FBYixDQUFxQmQsR0FBRyxDQUFDZSxNQUFKLEVBQXJCLEVBQW1DZixHQUFHLENBQUNlLE1BQUosRUFBbkMsQ0FEd0I7QUFFakNDLElBQUFBLGNBQWMsRUFBRWhCLEdBQUcsQ0FBQ2lCLE9BQUo7QUFGaUIsR0FBbEIsQ0FBakIsRUFHSSwwQkFISjtBQUlBLFFBQU1DLGtCQUFrQixHQUFHLEVBQTNCO0FBQ0EsU0FBTztBQUNMQyxJQUFBQSxLQUFLLEVBQUUsTUFBTTtBQUNYRCxNQUFBQSxrQkFBa0IsQ0FBQ0UsTUFBbkIsR0FBNEIsQ0FBNUI7QUFDQUMsTUFBQUEsTUFBTSxDQUFDQyxPQUFQLENBQWVaLElBQUksQ0FBQ0csT0FBcEIsRUFBNkJVLE9BQTdCLENBQXFDLENBQUMsQ0FBQ3JCLEdBQUQsRUFBTUMsS0FBTixDQUFELEtBQWtCO0FBQ3JELGNBQU1xQixNQUFNLEdBQUd0QixHQUFHLENBQUN1QixPQUFKLENBQVksS0FBWixFQUFtQixFQUFuQixDQUFmOztBQUNBLFlBQUlmLElBQUksQ0FBQ00sY0FBTCxLQUF3QixJQUF4QixJQUFnQ2QsR0FBRyxDQUFDd0IsVUFBSixDQUFlLEdBQWYsQ0FBcEMsRUFBeUQ7QUFDdkRSLFVBQUFBLGtCQUFrQixDQUFDTSxNQUFELENBQWxCLEdBQTZCbEIsT0FBTyxDQUFDQyxHQUFSLENBQVlpQixNQUFaLENBQTdCO0FBQ0QsU0FGRCxNQUVPO0FBQ0wxQixVQUFBQSxNQUFNLENBQUNRLE9BQU8sQ0FBQ0MsR0FBUixDQUFZaUIsTUFBWixNQUF3QnBCLFNBQXpCLEVBQXFDLDZCQUE0Qm9CLE1BQU8sRUFBeEUsQ0FBTjtBQUNEOztBQUNEdkIsUUFBQUEsU0FBUyxDQUFDdUIsTUFBRCxFQUFTckIsS0FBVCxDQUFUO0FBQ0QsT0FSRDtBQVNELEtBWkk7QUFhTHdCLElBQUFBLE9BQU8sRUFBRSxNQUFNO0FBQ2JOLE1BQUFBLE1BQU0sQ0FBQ1QsSUFBUCxDQUFZRixJQUFJLENBQUNHLE9BQWpCLEVBQTBCVSxPQUExQixDQUFtQ3JCLEdBQUQsSUFBUztBQUN6QyxjQUFNc0IsTUFBTSxHQUFHdEIsR0FBRyxDQUFDdUIsT0FBSixDQUFZLEtBQVosRUFBbUIsRUFBbkIsQ0FBZjtBQUNBM0IsUUFBQUEsTUFBTSxDQUFDLE9BQU9RLE9BQU8sQ0FBQ0MsR0FBUixDQUFZaUIsTUFBWixDQUFQLEtBQStCLFFBQWhDLEVBQTJDLDZCQUE0QkEsTUFBTyxFQUE5RSxDQUFOO0FBQ0F2QixRQUFBQSxTQUFTLENBQUN1QixNQUFELEVBQVNOLGtCQUFrQixDQUFDTSxNQUFELENBQTNCLENBQVQ7QUFDRCxPQUpEO0FBS0Q7QUFuQkksR0FBUDtBQXFCRCxDQTNCRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgSm9pID0gcmVxdWlyZSgnam9pLXN0cmljdCcpO1xuXG5jb25zdCBzZXRFbnZWYXIgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXModmFsdWUpKSB7XG4gICAgZGVsZXRlIHByb2Nlc3MuZW52W2tleV07XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpO1xuICAgIHByb2Nlc3MuZW52W2tleV0gPSB2YWx1ZTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSAob3B0cykgPT4ge1xuICBKb2kuYXNzZXJ0KG9wdHMsIEpvaS5vYmplY3QoKS5rZXlzKHtcbiAgICBlbnZWYXJzOiBKb2kub2JqZWN0KCkucGF0dGVybihKb2kuc3RyaW5nKCksIEpvaS5zdHJpbmcoKSksXG4gICAgYWxsb3dPdmVyd3JpdGU6IEpvaS5ib29sZWFuKClcbiAgfSksICdJbnZhbGlkIE9wdGlvbnMgUHJvdmlkZWQnKTtcbiAgY29uc3QgZW52VmFyc092ZXJ3cml0dGVuID0ge307XG4gIHJldHVybiB7XG4gICAgYXBwbHk6ICgpID0+IHtcbiAgICAgIGVudlZhcnNPdmVyd3JpdHRlbi5sZW5ndGggPSAwO1xuICAgICAgT2JqZWN0LmVudHJpZXMob3B0cy5lbnZWYXJzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgY29uc3QgZW52VmFyID0ga2V5LnJlcGxhY2UoL15cXF4vLCAnJyk7XG4gICAgICAgIGlmIChvcHRzLmFsbG93T3ZlcndyaXRlID09PSB0cnVlIHx8IGtleS5zdGFydHNXaXRoKCdeJykpIHtcbiAgICAgICAgICBlbnZWYXJzT3ZlcndyaXR0ZW5bZW52VmFyXSA9IHByb2Nlc3MuZW52W2VudlZhcl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzZXJ0KHByb2Nlc3MuZW52W2VudlZhcl0gPT09IHVuZGVmaW5lZCwgYEVudmlyb25tZW50IFZhcmlhYmxlIFNldDogJHtlbnZWYXJ9YCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0RW52VmFyKGVudlZhciwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB1bmFwcGx5OiAoKSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyhvcHRzLmVudlZhcnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBlbnZWYXIgPSBrZXkucmVwbGFjZSgvXlxcXi8sICcnKTtcbiAgICAgICAgYXNzZXJ0KHR5cGVvZiBwcm9jZXNzLmVudltlbnZWYXJdID09PSAnc3RyaW5nJywgYEVudmlyb25tZW50IFZhcmlhYmxlIFNldDogJHtlbnZWYXJ9YCk7XG4gICAgICAgIHNldEVudlZhcihlbnZWYXIsIGVudlZhcnNPdmVyd3JpdHRlbltlbnZWYXJdKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG4iXX0=