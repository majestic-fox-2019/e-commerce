function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const assert = require('assert');

const path = require('path');

const fs = require('smart-fs');

const Joi = require('joi-strict');

const nock = require('nock');

const nockListener = require('./request-recorder/nock-listener');

const nockBack = nock.back;

const buildKey = interceptor => `${interceptor.method} ${interceptor.basePath}${interceptor.uri}`;

module.exports = opts => {
  Joi.assert(opts, Joi.object().keys({
    cassetteFolder: Joi.string(),
    stripHeaders: Joi.boolean(),
    strict: Joi.boolean(),
    heal: Joi.alternatives(Joi.boolean(), Joi.string())
  }), 'Invalid Options Provided');
  let nockDone = null;
  let cassetteFilePath = null;
  const knownCassetteNames = [];
  const records = [];
  const outOfOrderErrors = [];
  const expectedCassette = [];
  const pendingMocks = [];
  return {
    inject: async cassetteFile => {
      assert(nockDone === null);
      knownCassetteNames.push(cassetteFile);
      records.length = 0;
      outOfOrderErrors.length = 0;
      expectedCassette.length = 0;
      pendingMocks.length = 0;
      cassetteFilePath = path.join(opts.cassetteFolder, cassetteFile);
      const hasCassette = fs.existsSync(cassetteFilePath);

      if (hasCassette) {
        const cassetteContent = fs.smartRead(cassetteFilePath);
        pendingMocks.push(...nock.define(cassetteContent).map((e, idx) => ({
          idx,
          key: buildKey(e.interceptors[0]),
          record: cassetteContent[idx]
        })));
      }

      nockBack.setMode(hasCassette ? 'lockdown' : 'record');
      nockBack.fixtures = opts.cassetteFolder;
      nockListener.subscribe('no match', (_, req, body) => {
        assert(hasCassette === true);
      });
      nockDone = await new Promise(resolve => nockBack(cassetteFile, {
        before: (scope, scopeIdx) => {
          records.push(_objectSpread({}, scope)); // eslint-disable-next-line no-param-reassign

          scope.filteringRequestBody = body => {
            if (opts.heal === 'body') {
              const idx = pendingMocks.findIndex(m => m.idx === scopeIdx);
              assert(idx === 0);
              let requestBody = body;

              try {
                requestBody = JSON.parse(requestBody);
              } catch (e) {
                /* */
              }

              pendingMocks[idx].record.body = requestBody === null ? 'null' : requestBody;
              return scope.body;
            }

            return body;
          };

          return scope;
        },
        after: (scope, scopeIdx) => {
          scope.on('request', () => {
            const idx = pendingMocks.findIndex(e => e.idx === scopeIdx);
            expectedCassette.push(pendingMocks[idx].record);

            if (idx !== 0) {
              outOfOrderErrors.push(pendingMocks[idx].key);
            }

            pendingMocks.splice(idx, 1);
          });
        },
        afterRecord: recordings => JSON.stringify(opts.stripHeaders === true ? recordings.map(r => {
          const res = _objectSpread({}, r);

          delete res.rawHeaders;
          return res;
        }) : recordings, null, 2)
      }, resolve));
    },
    release: () => {
      assert(nockDone !== null);
      nockDone();
      nockDone = null;
      nockListener.unsubscribeAll('no match');

      if (opts.heal !== false) {
        fs.smartWrite(cassetteFilePath, expectedCassette);
      }

      if (opts.strict !== false) {
        if (outOfOrderErrors.length !== 0) {
          throw new Error(`Out of Order Recordings: ${outOfOrderErrors.join(', ')}`);
        }

        if (pendingMocks.length !== 0) {
          throw new Error(`Unmatched Recordings: ${pendingMocks.map(e => e.key).join(', ')}`);
        }
      }
    },
    shutdown: () => {
      const unexpectedFiles = fs.walkDir(opts.cassetteFolder).filter(f => !knownCassetteNames.includes(f));

      if (unexpectedFiles.length !== 0) {
        throw new Error(`Unexpected file(s) in cassette folder: ${unexpectedFiles.join(', ')}`);
      }
    },
    get: () => ({
      records: records.slice(),
      outOfOrderErrors: outOfOrderErrors.slice(),
      unmatchedRecordings: pendingMocks.map(e => e.key).slice(),
      expectedCassette: expectedCassette.slice(),
      cassetteFilePath
    })
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,