const assert = require('assert');

const Joi = require('joi-strict');

module.exports = opts => {
  Joi.assert(opts, Joi.object().keys({
    logger: Joi.any(),
    verbose: Joi.boolean()
  }), 'Invalid Options Provided');
  const logger = opts.logger;
  let verbose = opts.verbose;
  let loggerOriginal = null;
  const logLevels = Object.entries(logger).filter(([k, v]) => typeof v === 'function').map(([k]) => k);
  assert(logLevels.length !== 0, 'Passed logger does not expose logging functionality');
  let logs;

  const reset = () => {
    logs = [];
    logLevels.forEach(level => {
      logs[level] = [];
    });
  };

  return {
    inject: () => {
      assert(loggerOriginal === null);
      verbose = opts.verbose;
      loggerOriginal = logLevels.reduce((p, c) => Object.assign(p, {
        [c]: logger[c]
      }), {});
      reset();
      Object.keys(loggerOriginal).forEach(logLevel => {
        logger[logLevel] = (...args) => {
          if (verbose === true) {
            loggerOriginal[logLevel](...args);
          }

          logs.push(...args);
          logs[logLevel].push(...args);
        };
      });
    },
    release: () => {
      assert(loggerOriginal !== null);
      Object.assign(logger, loggerOriginal);
      loggerOriginal = null;
    },
    verbose: state => {
      assert(typeof state === 'boolean');
      verbose = state;
    },
    levels: () => logLevels.slice(),
    get: (level = null) => {
      assert(level === null || logLevels.includes(level));
      return (level === null ? logs : logs[level]).slice();
    },
    reset
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2R1bGVzL2xvZy1yZWNvcmRlci5qcyJdLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiSm9pIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdHMiLCJvYmplY3QiLCJrZXlzIiwibG9nZ2VyIiwiYW55IiwidmVyYm9zZSIsImJvb2xlYW4iLCJsb2dnZXJPcmlnaW5hbCIsImxvZ0xldmVscyIsIk9iamVjdCIsImVudHJpZXMiLCJmaWx0ZXIiLCJrIiwidiIsIm1hcCIsImxlbmd0aCIsImxvZ3MiLCJyZXNldCIsImZvckVhY2giLCJsZXZlbCIsImluamVjdCIsInJlZHVjZSIsInAiLCJjIiwiYXNzaWduIiwibG9nTGV2ZWwiLCJhcmdzIiwicHVzaCIsInJlbGVhc2UiLCJzdGF0ZSIsImxldmVscyIsInNsaWNlIiwiZ2V0IiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHRCxPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWtCQyxJQUFELElBQVU7QUFDekJILEVBQUFBLEdBQUcsQ0FBQ0YsTUFBSixDQUFXSyxJQUFYLEVBQWlCSCxHQUFHLENBQUNJLE1BQUosR0FBYUMsSUFBYixDQUFrQjtBQUNqQ0MsSUFBQUEsTUFBTSxFQUFFTixHQUFHLENBQUNPLEdBQUosRUFEeUI7QUFFakNDLElBQUFBLE9BQU8sRUFBRVIsR0FBRyxDQUFDUyxPQUFKO0FBRndCLEdBQWxCLENBQWpCLEVBR0ksMEJBSEo7QUFJQSxRQUFNSCxNQUFNLEdBQUdILElBQUksQ0FBQ0csTUFBcEI7QUFDQSxNQUFJRSxPQUFPLEdBQUdMLElBQUksQ0FBQ0ssT0FBbkI7QUFDQSxNQUFJRSxjQUFjLEdBQUcsSUFBckI7QUFFQSxRQUFNQyxTQUFTLEdBQUdDLE1BQU0sQ0FDckJDLE9BRGUsQ0FDUFAsTUFETyxFQUVmUSxNQUZlLENBRVIsQ0FBQyxDQUFDQyxDQUFELEVBQUlDLENBQUosQ0FBRCxLQUFZLE9BQU9BLENBQVAsS0FBYSxVQUZqQixFQUdmQyxHQUhlLENBR1gsQ0FBQyxDQUFDRixDQUFELENBQUQsS0FBU0EsQ0FIRSxDQUFsQjtBQUlBakIsRUFBQUEsTUFBTSxDQUFDYSxTQUFTLENBQUNPLE1BQVYsS0FBcUIsQ0FBdEIsRUFBeUIscURBQXpCLENBQU47QUFFQSxNQUFJQyxJQUFKOztBQUNBLFFBQU1DLEtBQUssR0FBRyxNQUFNO0FBQ2xCRCxJQUFBQSxJQUFJLEdBQUcsRUFBUDtBQUNBUixJQUFBQSxTQUFTLENBQUNVLE9BQVYsQ0FBbUJDLEtBQUQsSUFBVztBQUMzQkgsTUFBQUEsSUFBSSxDQUFDRyxLQUFELENBQUosR0FBYyxFQUFkO0FBQ0QsS0FGRDtBQUdELEdBTEQ7O0FBT0EsU0FBTztBQUNMQyxJQUFBQSxNQUFNLEVBQUUsTUFBTTtBQUNaekIsTUFBQUEsTUFBTSxDQUFDWSxjQUFjLEtBQUssSUFBcEIsQ0FBTjtBQUNBRixNQUFBQSxPQUFPLEdBQUdMLElBQUksQ0FBQ0ssT0FBZjtBQUNBRSxNQUFBQSxjQUFjLEdBQUdDLFNBQVMsQ0FDdkJhLE1BRGMsQ0FDUCxDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVWQsTUFBTSxDQUFDZSxNQUFQLENBQWNGLENBQWQsRUFBaUI7QUFBRSxTQUFDQyxDQUFELEdBQUtwQixNQUFNLENBQUNvQixDQUFEO0FBQWIsT0FBakIsQ0FESCxFQUN5QyxFQUR6QyxDQUFqQjtBQUVBTixNQUFBQSxLQUFLO0FBQ0xSLE1BQUFBLE1BQU0sQ0FBQ1AsSUFBUCxDQUFZSyxjQUFaLEVBQTRCVyxPQUE1QixDQUFxQ08sUUFBRCxJQUFjO0FBQ2hEdEIsUUFBQUEsTUFBTSxDQUFDc0IsUUFBRCxDQUFOLEdBQW1CLENBQUMsR0FBR0MsSUFBSixLQUFhO0FBQzlCLGNBQUlyQixPQUFPLEtBQUssSUFBaEIsRUFBc0I7QUFDcEJFLFlBQUFBLGNBQWMsQ0FBQ2tCLFFBQUQsQ0FBZCxDQUF5QixHQUFHQyxJQUE1QjtBQUNEOztBQUNEVixVQUFBQSxJQUFJLENBQUNXLElBQUwsQ0FBVSxHQUFHRCxJQUFiO0FBQ0FWLFVBQUFBLElBQUksQ0FBQ1MsUUFBRCxDQUFKLENBQWVFLElBQWYsQ0FBb0IsR0FBR0QsSUFBdkI7QUFDRCxTQU5EO0FBT0QsT0FSRDtBQVNELEtBaEJJO0FBaUJMRSxJQUFBQSxPQUFPLEVBQUUsTUFBTTtBQUNiakMsTUFBQUEsTUFBTSxDQUFDWSxjQUFjLEtBQUssSUFBcEIsQ0FBTjtBQUNBRSxNQUFBQSxNQUFNLENBQUNlLE1BQVAsQ0FBY3JCLE1BQWQsRUFBc0JJLGNBQXRCO0FBQ0FBLE1BQUFBLGNBQWMsR0FBRyxJQUFqQjtBQUNELEtBckJJO0FBc0JMRixJQUFBQSxPQUFPLEVBQUd3QixLQUFELElBQVc7QUFDbEJsQyxNQUFBQSxNQUFNLENBQUMsT0FBT2tDLEtBQVAsS0FBaUIsU0FBbEIsQ0FBTjtBQUNBeEIsTUFBQUEsT0FBTyxHQUFHd0IsS0FBVjtBQUNELEtBekJJO0FBMEJMQyxJQUFBQSxNQUFNLEVBQUUsTUFBTXRCLFNBQVMsQ0FBQ3VCLEtBQVYsRUExQlQ7QUEyQkxDLElBQUFBLEdBQUcsRUFBRSxDQUFDYixLQUFLLEdBQUcsSUFBVCxLQUFrQjtBQUNyQnhCLE1BQUFBLE1BQU0sQ0FBQ3dCLEtBQUssS0FBSyxJQUFWLElBQWtCWCxTQUFTLENBQUN5QixRQUFWLENBQW1CZCxLQUFuQixDQUFuQixDQUFOO0FBQ0EsYUFBTyxDQUFDQSxLQUFLLEtBQUssSUFBVixHQUFpQkgsSUFBakIsR0FBd0JBLElBQUksQ0FBQ0csS0FBRCxDQUE3QixFQUFzQ1ksS0FBdEMsRUFBUDtBQUNELEtBOUJJO0FBK0JMZCxJQUFBQTtBQS9CSyxHQUFQO0FBaUNELENBeEREIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5jb25zdCBKb2kgPSByZXF1aXJlKCdqb2ktc3RyaWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKG9wdHMpID0+IHtcbiAgSm9pLmFzc2VydChvcHRzLCBKb2kub2JqZWN0KCkua2V5cyh7XG4gICAgbG9nZ2VyOiBKb2kuYW55KCksXG4gICAgdmVyYm9zZTogSm9pLmJvb2xlYW4oKVxuICB9KSwgJ0ludmFsaWQgT3B0aW9ucyBQcm92aWRlZCcpO1xuICBjb25zdCBsb2dnZXIgPSBvcHRzLmxvZ2dlcjtcbiAgbGV0IHZlcmJvc2UgPSBvcHRzLnZlcmJvc2U7XG4gIGxldCBsb2dnZXJPcmlnaW5hbCA9IG51bGw7XG5cbiAgY29uc3QgbG9nTGV2ZWxzID0gT2JqZWN0XG4gICAgLmVudHJpZXMobG9nZ2VyKVxuICAgIC5maWx0ZXIoKFtrLCB2XSkgPT4gdHlwZW9mIHYgPT09ICdmdW5jdGlvbicpXG4gICAgLm1hcCgoW2tdKSA9PiBrKTtcbiAgYXNzZXJ0KGxvZ0xldmVscy5sZW5ndGggIT09IDAsICdQYXNzZWQgbG9nZ2VyIGRvZXMgbm90IGV4cG9zZSBsb2dnaW5nIGZ1bmN0aW9uYWxpdHknKTtcblxuICBsZXQgbG9ncztcbiAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgbG9ncyA9IFtdO1xuICAgIGxvZ0xldmVscy5mb3JFYWNoKChsZXZlbCkgPT4ge1xuICAgICAgbG9nc1tsZXZlbF0gPSBbXTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGluamVjdDogKCkgPT4ge1xuICAgICAgYXNzZXJ0KGxvZ2dlck9yaWdpbmFsID09PSBudWxsKTtcbiAgICAgIHZlcmJvc2UgPSBvcHRzLnZlcmJvc2U7XG4gICAgICBsb2dnZXJPcmlnaW5hbCA9IGxvZ0xldmVsc1xuICAgICAgICAucmVkdWNlKChwLCBjKSA9PiBPYmplY3QuYXNzaWduKHAsIHsgW2NdOiBsb2dnZXJbY10gfSksIHt9KTtcbiAgICAgIHJlc2V0KCk7XG4gICAgICBPYmplY3Qua2V5cyhsb2dnZXJPcmlnaW5hbCkuZm9yRWFjaCgobG9nTGV2ZWwpID0+IHtcbiAgICAgICAgbG9nZ2VyW2xvZ0xldmVsXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgaWYgKHZlcmJvc2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGxvZ2dlck9yaWdpbmFsW2xvZ0xldmVsXSguLi5hcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbG9ncy5wdXNoKC4uLmFyZ3MpO1xuICAgICAgICAgIGxvZ3NbbG9nTGV2ZWxdLnB1c2goLi4uYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbGVhc2U6ICgpID0+IHtcbiAgICAgIGFzc2VydChsb2dnZXJPcmlnaW5hbCAhPT0gbnVsbCk7XG4gICAgICBPYmplY3QuYXNzaWduKGxvZ2dlciwgbG9nZ2VyT3JpZ2luYWwpO1xuICAgICAgbG9nZ2VyT3JpZ2luYWwgPSBudWxsO1xuICAgIH0sXG4gICAgdmVyYm9zZTogKHN0YXRlKSA9PiB7XG4gICAgICBhc3NlcnQodHlwZW9mIHN0YXRlID09PSAnYm9vbGVhbicpO1xuICAgICAgdmVyYm9zZSA9IHN0YXRlO1xuICAgIH0sXG4gICAgbGV2ZWxzOiAoKSA9PiBsb2dMZXZlbHMuc2xpY2UoKSxcbiAgICBnZXQ6IChsZXZlbCA9IG51bGwpID0+IHtcbiAgICAgIGFzc2VydChsZXZlbCA9PT0gbnVsbCB8fCBsb2dMZXZlbHMuaW5jbHVkZXMobGV2ZWwpKTtcbiAgICAgIHJldHVybiAobGV2ZWwgPT09IG51bGwgPyBsb2dzIDogbG9nc1tsZXZlbF0pLnNsaWNlKCk7XG4gICAgfSxcbiAgICByZXNldFxuICB9O1xufTtcbiJdfQ==