const assert = require('assert');

const crypto = require('crypto');

const get = require('lodash.get');

const Joi = require('joi-strict');

module.exports = opts => {
  Joi.assert(opts, Joi.object().keys({
    seed: Joi.string(),
    reseed: Joi.boolean()
  }), 'Invalid Options Provided');
  let original = null;
  return {
    inject: () => {
      assert(original === null);
      original = crypto.randomBytes;
      const executionCounts = {};

      crypto.randomBytes = (size, cb) => {
        // randomization is seeded "per key"
        const stack = new Error().stack.split('\n');
        const subStack = stack.slice(stack.findIndex(e => e.indexOf('/node_modules/') !== -1));
        const stackOrigin = get(subStack, [subStack.findIndex(e => e.indexOf('/node_modules/') === -1) - 1], '');
        const originFile = get(stackOrigin.match(/^.*?\([^)]+?\/node_modules\/([^)]+):\d+:\d+\)$/), [1], '');
        const key = `${originFile}@${size}`;
        executionCounts[key] = opts.reseed === true ? null : (executionCounts[key] || 0) + 1;
        let result = crypto.createHash('sha256').update(opts.seed).update(key).update(String(executionCounts[key])).digest();

        while (result.length < size) {
          result = Buffer.concat([result, crypto.createHash('sha256').update(result).digest()]);
        }

        result = result.slice(0, size);
        return cb ? cb(null, result) : result;
      };
    },
    release: () => {
      assert(original !== null);
      crypto.randomBytes = original;
      original = null;
    },
    isInjected: () => original !== null
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2R1bGVzL3JhbmRvbS1zZWVkZXIuanMiXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsImNyeXB0byIsImdldCIsIkpvaSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRzIiwib2JqZWN0Iiwia2V5cyIsInNlZWQiLCJzdHJpbmciLCJyZXNlZWQiLCJib29sZWFuIiwib3JpZ2luYWwiLCJpbmplY3QiLCJyYW5kb21CeXRlcyIsImV4ZWN1dGlvbkNvdW50cyIsInNpemUiLCJjYiIsInN0YWNrIiwiRXJyb3IiLCJzcGxpdCIsInN1YlN0YWNrIiwic2xpY2UiLCJmaW5kSW5kZXgiLCJlIiwiaW5kZXhPZiIsInN0YWNrT3JpZ2luIiwib3JpZ2luRmlsZSIsIm1hdGNoIiwia2V5IiwicmVzdWx0IiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsIlN0cmluZyIsImRpZ2VzdCIsImxlbmd0aCIsIkJ1ZmZlciIsImNvbmNhdCIsInJlbGVhc2UiLCJpc0luamVjdGVkIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNRyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUVBSSxNQUFNLENBQUNDLE9BQVAsR0FBa0JDLElBQUQsSUFBVTtBQUN6QkgsRUFBQUEsR0FBRyxDQUFDSixNQUFKLENBQVdPLElBQVgsRUFBaUJILEdBQUcsQ0FBQ0ksTUFBSixHQUFhQyxJQUFiLENBQWtCO0FBQ2pDQyxJQUFBQSxJQUFJLEVBQUVOLEdBQUcsQ0FBQ08sTUFBSixFQUQyQjtBQUVqQ0MsSUFBQUEsTUFBTSxFQUFFUixHQUFHLENBQUNTLE9BQUo7QUFGeUIsR0FBbEIsQ0FBakIsRUFHSSwwQkFISjtBQUlBLE1BQUlDLFFBQVEsR0FBRyxJQUFmO0FBRUEsU0FBTztBQUNMQyxJQUFBQSxNQUFNLEVBQUUsTUFBTTtBQUNaZixNQUFBQSxNQUFNLENBQUNjLFFBQVEsS0FBSyxJQUFkLENBQU47QUFFQUEsTUFBQUEsUUFBUSxHQUFHWixNQUFNLENBQUNjLFdBQWxCO0FBQ0EsWUFBTUMsZUFBZSxHQUFHLEVBQXhCOztBQUVBZixNQUFBQSxNQUFNLENBQUNjLFdBQVAsR0FBcUIsQ0FBQ0UsSUFBRCxFQUFPQyxFQUFQLEtBQWM7QUFDakM7QUFDQSxjQUFNQyxLQUFLLEdBQUcsSUFBSUMsS0FBSixHQUFZRCxLQUFaLENBQWtCRSxLQUFsQixDQUF3QixJQUF4QixDQUFkO0FBQ0EsY0FBTUMsUUFBUSxHQUFHSCxLQUFLLENBQUNJLEtBQU4sQ0FBWUosS0FBSyxDQUFDSyxTQUFOLENBQWlCQyxDQUFELElBQU9BLENBQUMsQ0FBQ0MsT0FBRixDQUFVLGdCQUFWLE1BQWdDLENBQUMsQ0FBeEQsQ0FBWixDQUFqQjtBQUNBLGNBQU1DLFdBQVcsR0FBR3pCLEdBQUcsQ0FBQ29CLFFBQUQsRUFBVyxDQUFDQSxRQUFRLENBQUNFLFNBQVQsQ0FBb0JDLENBQUQsSUFBT0EsQ0FBQyxDQUFDQyxPQUFGLENBQVUsZ0JBQVYsTUFBZ0MsQ0FBQyxDQUEzRCxJQUFnRSxDQUFqRSxDQUFYLEVBQWdGLEVBQWhGLENBQXZCO0FBQ0EsY0FBTUUsVUFBVSxHQUFHMUIsR0FBRyxDQUFDeUIsV0FBVyxDQUFDRSxLQUFaLENBQWtCLGdEQUFsQixDQUFELEVBQXNFLENBQUMsQ0FBRCxDQUF0RSxFQUEyRSxFQUEzRSxDQUF0QjtBQUNBLGNBQU1DLEdBQUcsR0FBSSxHQUFFRixVQUFXLElBQUdYLElBQUssRUFBbEM7QUFFQUQsUUFBQUEsZUFBZSxDQUFDYyxHQUFELENBQWYsR0FBdUJ4QixJQUFJLENBQUNLLE1BQUwsS0FBZ0IsSUFBaEIsR0FBdUIsSUFBdkIsR0FBOEIsQ0FBQ0ssZUFBZSxDQUFDYyxHQUFELENBQWYsSUFBd0IsQ0FBekIsSUFBOEIsQ0FBbkY7QUFDQSxZQUFJQyxNQUFNLEdBQUc5QixNQUFNLENBQ2hCK0IsVUFEVSxDQUNDLFFBREQsRUFFVkMsTUFGVSxDQUVIM0IsSUFBSSxDQUFDRyxJQUZGLEVBR1Z3QixNQUhVLENBR0hILEdBSEcsRUFJVkcsTUFKVSxDQUlIQyxNQUFNLENBQUNsQixlQUFlLENBQUNjLEdBQUQsQ0FBaEIsQ0FKSCxFQUtWSyxNQUxVLEVBQWI7O0FBTUEsZUFBT0osTUFBTSxDQUFDSyxNQUFQLEdBQWdCbkIsSUFBdkIsRUFBNkI7QUFDM0JjLFVBQUFBLE1BQU0sR0FBR00sTUFBTSxDQUFDQyxNQUFQLENBQWMsQ0FBQ1AsTUFBRCxFQUFTOUIsTUFBTSxDQUFDK0IsVUFBUCxDQUFrQixRQUFsQixFQUE0QkMsTUFBNUIsQ0FBbUNGLE1BQW5DLEVBQTJDSSxNQUEzQyxFQUFULENBQWQsQ0FBVDtBQUNEOztBQUVESixRQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ1IsS0FBUCxDQUFhLENBQWIsRUFBZ0JOLElBQWhCLENBQVQ7QUFDQSxlQUFPQyxFQUFFLEdBQUdBLEVBQUUsQ0FBQyxJQUFELEVBQU9hLE1BQVAsQ0FBTCxHQUFzQkEsTUFBL0I7QUFDRCxPQXJCRDtBQXNCRCxLQTdCSTtBQThCTFEsSUFBQUEsT0FBTyxFQUFFLE1BQU07QUFDYnhDLE1BQUFBLE1BQU0sQ0FBQ2MsUUFBUSxLQUFLLElBQWQsQ0FBTjtBQUNBWixNQUFBQSxNQUFNLENBQUNjLFdBQVAsR0FBcUJGLFFBQXJCO0FBQ0FBLE1BQUFBLFFBQVEsR0FBRyxJQUFYO0FBQ0QsS0FsQ0k7QUFtQ0wyQixJQUFBQSxVQUFVLEVBQUUsTUFBTTNCLFFBQVEsS0FBSztBQW5DMUIsR0FBUDtBQXFDRCxDQTVDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5jb25zdCBnZXQgPSByZXF1aXJlKCdsb2Rhc2guZ2V0Jyk7XG5jb25zdCBKb2kgPSByZXF1aXJlKCdqb2ktc3RyaWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKG9wdHMpID0+IHtcbiAgSm9pLmFzc2VydChvcHRzLCBKb2kub2JqZWN0KCkua2V5cyh7XG4gICAgc2VlZDogSm9pLnN0cmluZygpLFxuICAgIHJlc2VlZDogSm9pLmJvb2xlYW4oKVxuICB9KSwgJ0ludmFsaWQgT3B0aW9ucyBQcm92aWRlZCcpO1xuICBsZXQgb3JpZ2luYWwgPSBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgaW5qZWN0OiAoKSA9PiB7XG4gICAgICBhc3NlcnQob3JpZ2luYWwgPT09IG51bGwpO1xuXG4gICAgICBvcmlnaW5hbCA9IGNyeXB0by5yYW5kb21CeXRlcztcbiAgICAgIGNvbnN0IGV4ZWN1dGlvbkNvdW50cyA9IHt9O1xuXG4gICAgICBjcnlwdG8ucmFuZG9tQnl0ZXMgPSAoc2l6ZSwgY2IpID0+IHtcbiAgICAgICAgLy8gcmFuZG9taXphdGlvbiBpcyBzZWVkZWQgXCJwZXIga2V5XCJcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjay5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGNvbnN0IHN1YlN0YWNrID0gc3RhY2suc2xpY2Uoc3RhY2suZmluZEluZGV4KChlKSA9PiBlLmluZGV4T2YoJy9ub2RlX21vZHVsZXMvJykgIT09IC0xKSk7XG4gICAgICAgIGNvbnN0IHN0YWNrT3JpZ2luID0gZ2V0KHN1YlN0YWNrLCBbc3ViU3RhY2suZmluZEluZGV4KChlKSA9PiBlLmluZGV4T2YoJy9ub2RlX21vZHVsZXMvJykgPT09IC0xKSAtIDFdLCAnJyk7XG4gICAgICAgIGNvbnN0IG9yaWdpbkZpbGUgPSBnZXQoc3RhY2tPcmlnaW4ubWF0Y2goL14uKj9cXChbXildKz9cXC9ub2RlX21vZHVsZXNcXC8oW14pXSspOlxcZCs6XFxkK1xcKSQvKSwgWzFdLCAnJyk7XG4gICAgICAgIGNvbnN0IGtleSA9IGAke29yaWdpbkZpbGV9QCR7c2l6ZX1gO1xuXG4gICAgICAgIGV4ZWN1dGlvbkNvdW50c1trZXldID0gb3B0cy5yZXNlZWQgPT09IHRydWUgPyBudWxsIDogKGV4ZWN1dGlvbkNvdW50c1trZXldIHx8IDApICsgMTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGNyeXB0b1xuICAgICAgICAgIC5jcmVhdGVIYXNoKCdzaGEyNTYnKVxuICAgICAgICAgIC51cGRhdGUob3B0cy5zZWVkKVxuICAgICAgICAgIC51cGRhdGUoa2V5KVxuICAgICAgICAgIC51cGRhdGUoU3RyaW5nKGV4ZWN1dGlvbkNvdW50c1trZXldKSlcbiAgICAgICAgICAuZGlnZXN0KCk7XG4gICAgICAgIHdoaWxlIChyZXN1bHQubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgICAgIHJlc3VsdCA9IEJ1ZmZlci5jb25jYXQoW3Jlc3VsdCwgY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShyZXN1bHQpLmRpZ2VzdCgpXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgc2l6ZSk7XG4gICAgICAgIHJldHVybiBjYiA/IGNiKG51bGwsIHJlc3VsdCkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0sXG4gICAgcmVsZWFzZTogKCkgPT4ge1xuICAgICAgYXNzZXJ0KG9yaWdpbmFsICE9PSBudWxsKTtcbiAgICAgIGNyeXB0by5yYW5kb21CeXRlcyA9IG9yaWdpbmFsO1xuICAgICAgb3JpZ2luYWwgPSBudWxsO1xuICAgIH0sXG4gICAgaXNJbmplY3RlZDogKCkgPT4gb3JpZ2luYWwgIT09IG51bGxcbiAgfTtcbn07XG4iXX0=