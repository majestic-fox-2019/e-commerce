function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Joi = require('@hapi/joi').defaults(schema => schema.options({
  presence: 'required'
}));

module.exports = _objectSpread({
  test: (object, schema) => {
    if (!Joi.isSchema(schema)) {
      throw new Error(`Not a Joi schema: ${typeof schema === 'string' ? schema : JSON.stringify(schema)}`);
    }

    return schema.validate(object).error === undefined;
  }
}, Joi);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJKb2kiLCJyZXF1aXJlIiwiZGVmYXVsdHMiLCJzY2hlbWEiLCJvcHRpb25zIiwicHJlc2VuY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwidGVzdCIsIm9iamVjdCIsImlzU2NoZW1hIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwidmFsaWRhdGUiLCJlcnJvciIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUFQLENBQXFCQyxRQUFyQixDQUErQkMsTUFBRCxJQUFZQSxNQUFNLENBQUNDLE9BQVAsQ0FBZTtBQUNuRUMsRUFBQUEsUUFBUSxFQUFFO0FBRHlELENBQWYsQ0FBMUMsQ0FBWjs7QUFJQUMsTUFBTSxDQUFDQyxPQUFQO0FBQ0VDLEVBQUFBLElBQUksRUFBRSxDQUFDQyxNQUFELEVBQVNOLE1BQVQsS0FBb0I7QUFDeEIsUUFBSSxDQUFDSCxHQUFHLENBQUNVLFFBQUosQ0FBYVAsTUFBYixDQUFMLEVBQTJCO0FBQ3pCLFlBQU0sSUFBSVEsS0FBSixDQUFXLHFCQUFvQixPQUFPUixNQUFQLEtBQWtCLFFBQWxCLEdBQTZCQSxNQUE3QixHQUFzQ1MsSUFBSSxDQUFDQyxTQUFMLENBQWVWLE1BQWYsQ0FBdUIsRUFBNUYsQ0FBTjtBQUNEOztBQUNELFdBQU9BLE1BQU0sQ0FBQ1csUUFBUCxDQUFnQkwsTUFBaEIsRUFBd0JNLEtBQXhCLEtBQWtDQyxTQUF6QztBQUNEO0FBTkgsR0FPS2hCLEdBUEwiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBKb2kgPSByZXF1aXJlKCdAaGFwaS9qb2knKS5kZWZhdWx0cygoc2NoZW1hKSA9PiBzY2hlbWEub3B0aW9ucyh7XG4gIHByZXNlbmNlOiAncmVxdWlyZWQnXG59KSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0ZXN0OiAob2JqZWN0LCBzY2hlbWEpID0+IHtcbiAgICBpZiAoIUpvaS5pc1NjaGVtYShzY2hlbWEpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBhIEpvaSBzY2hlbWE6ICR7dHlwZW9mIHNjaGVtYSA9PT0gJ3N0cmluZycgPyBzY2hlbWEgOiBKU09OLnN0cmluZ2lmeShzY2hlbWEpfWApO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hLnZhbGlkYXRlKG9iamVjdCkuZXJyb3IgPT09IHVuZGVmaW5lZDtcbiAgfSxcbiAgLi4uSm9pXG59O1xuIl19